!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t():Object.assign(e,t())}(this,(function(){"use strict";class e{constructor(e){this.locale=e,this._minimumDays=this.constructor.getMinimumDays(this.locale),this._weekStartOffset=this.constructor.getWeekStartOffset(this.locale),this._data={}}formatDay(e,t="long",s=!0){return this.getDays(t,s)[e]}formatDayPeriod(e,t="long"){return this.getDayPeriods(t)[e]}formatEra(e,t="long"){return this.getEras(t)[e]}formatMonth(e,t="long",s=!0){return this.getMonths(t,s)[e-1]}formatNumber(e,t=0){const s=this.getNumbers();return(""+e).padStart(t,0).replace(/\d/g,e=>s[e])}formatTimeZoneName(e,t,s="long"){return this._makeFormatter({second:"numeric",timeZone:t,timeZoneName:s}).formatToParts(e).find(e=>"timeZoneName"===e.type).value}minimumDays(){return this._minimumDays}parseDay(e,t="long",s=!0){const r=this.getDays(t,s).indexOf(e)||7;return this.weekDay(r)}parseDayPeriod(e,t="long"){return this.getDayPeriods(t).indexOf(e)}parseEra(e,t="long"){return this.getEras(t).indexOf(e)}parseMonth(e,t="long",s=!0){return this.getMonths(t,s).indexOf(e)+1}parseNumber(e){const t=this.getNumbers();return parseInt((""+e).replace(/./g,e=>t.indexOf(e)))}weekDay(e){return(7+parseInt(e)-this._weekStartOffset)%7||7}static formatOffset(e,t=!0,s=!1){const r=Math.abs(e/60|0),a=Math.abs(e%60),n=e>0?"-":"+",i=(""+r).padStart(2,0),o=a||!s?(""+a).padStart(2,0):"";return`${n}${i}${t&&o?":":""}${o}`}static getType(e){switch(e){case 5:return"narrow";case 4:return"long";default:return"short"}}static getMinimumDays(e){let t=1;const s=e.toLowerCase().split("-");for(;1===t&&s.length;){for(const e in this._minimumDays){if(this._minimumDays[e].includes(s.join("-"))){t=parseInt(e);break}}s.pop()}return t}static getWeekStartOffset(e){let t;const s=e.toLowerCase().split("-");for(;!t&&s.length;){for(const e in this._weekStart){if(this._weekStart[e].includes(s.join("-"))){t=parseInt(e);break}}s.pop()}return t?t-2:0}static load(e){return e||(e=this.defaultLocale),e in this._formatters||(this._formatters[e]=new this(e)),this._formatters[e]}static loadRelative(e){return e||(e=this.defaultLocale),e in this._relativeFormatters||(this._relativeFormatters[e]=new Intl.RelativeTimeFormat(e,{numeric:"auto",style:"long"})),this._relativeFormatters[e]}}e.defaultLocale=Intl.DateTimeFormat().resolvedOptions().locale,e._formatters={},e._relativeFormatters={},e._formatDate={G:{key:"era",maxLength:5,regex:(t,s)=>{const r=e.getType(s);return t.getEras(r).join("|")},input:(t,s,r)=>{const a=e.getType(r);return t.parseEra(s,a)},output:(t,s)=>{const r=e.getType(s);return t.era(r)}},y:{key:"year",regex:e=>e.numberRegExp(),input:(e,t,s)=>(t=e.parseNumber(t),2!==s||2!==(""+t).length?t:t>40?1900+t:2e3+t),output:(e,t)=>{let s=e.getYear();return 2===t&&(s=(""+s).slice(-2)),e.formatter.formatNumber(Math.abs(s),t)}},Y:{key:"weekYear",regex:e=>e.numberRegExp(),input:(e,t,s)=>(t=e.parseNumber(t),2!==s||2!==(""+t).length?t:t>40?1900+t:2e3+t),output:(e,t)=>{let s=e.getWeekYear();return 2===t&&(s=(""+s).slice(-2)),e.formatter.formatNumber(Math.abs(s),t)}},Q:{key:"quarter",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getQuarter(),t)},q:{key:"quarter",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getQuarter(),t)},M:{key:"month",regex:(t,s)=>{switch(s){case 5:case 4:case 3:const r=e.getType(s);return t.getMonths(r,!1).join("|");default:return t.numberRegExp()}},input:(t,s,r)=>{switch(r){case 5:case 4:case 3:const a=e.getType(r);return t.parseMonth(s,a,!1);default:return t.parseNumber(s)}},output:(t,s)=>{const r=t.getMonth();switch(s){case 5:case 4:case 3:const a=e.getType(s);return t.formatter.formatMonth(r,a,!1);default:return t.formatter.formatNumber(r,s)}}},L:{key:"month",regex:(t,s)=>{switch(s){case 5:case 4:case 3:const r=e.getType(s);return t.getMonths(r).join("|");default:return t.numberRegExp()}},input:(t,s,r)=>{switch(r){case 5:case 4:case 3:const a=e.getType(r);return t.parseMonth(s,a);default:return t.parseNumber(s)}},output:(t,s)=>{const r=t.getMonth();switch(s){case 5:case 4:case 3:const a=e.getType(s);return t.formatter.formatMonth(r,a);default:return t.formatter.formatNumber(r,s)}}},w:{key:"week",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getWeek(),t)},W:{key:"weekOfMonth",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:e=>e.formatter.formatNumber(e.getWeekOfMonth())},d:{key:"date",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getDate(),t)},D:{key:"dayOfYear",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getDayOfYear(),t)},F:{key:"weekDayInMonth",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:e=>e.formatter.formatNumber(e.getWeekDayInMonth())},E:{key:"weekDay",regex:(t,s)=>{const r=e.getType(s);return t.getDays(r,!1).join("|")},input:(t,s,r)=>{const a=e.getType(r);return t.parseDay(s,a,!1)},output:(t,s)=>{const r=e.getType(s),a=t.getDay();return t.formatter.formatDay(a,r,!1)}},e:{key:"weekDay",maxLength:5,regex:(t,s)=>{switch(s){case 5:case 4:case 3:const r=e.getType(s);return t.getDays(r,!1).join("|");default:return t.numberRegExp()}},input:(t,s,r)=>{switch(r){case 5:case 4:case 3:const a=e.getType(r);return t.parseDay(s,a,!1);default:return t.parseNumber(s)}},output:(t,s)=>{switch(s){case 5:case 4:case 3:const r=e.getType(s),a=t.getDay();return t.formatter.formatDay(a,r,!1);default:const n=t.getWeekDay();return t.formatter.formatNumber(n,s)}}},c:{key:"weekDay",maxLength:5,regex:(t,s)=>{switch(s){case 5:case 4:case 3:const r=e.getType(s);return t.getDays(r).join("|");default:return t.numberRegExp()}},input:(t,s,r)=>{switch(r){case 5:case 4:case 3:const a=e.getType(r);return t.parseDay(s,a);default:return t.parseNumber(s)}},output:(t,s)=>{switch(s){case 5:case 4:case 3:const r=e.getType(s),a=t.getDay();return t.formatter.formatDay(a,r);default:const n=t.getWeekDay();return t.formatter.formatNumber(n)}}},a:{key:"dayPeriod",regex:(t,s)=>{const r=e.getType(s);return t.getDayPeriods(r).join("|")},input:(t,s,r)=>{const a=e.getType(r);return t.parseDayPeriod(s,a)},output:(t,s)=>{const r=e.getType(s);return t.dayPeriod(r)}},h:{key:"hours12",regex:e=>e.numberRegExp(),input:(e,t)=>(12===(t=e.parseNumber(t))&&(t=0),t),output:(e,t)=>e.formatter.formatNumber(e.getHours()%12||12,t)},H:{key:"hours24",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getHours(),t)},K:{key:"hours12",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getHours()%12,t)},k:{key:"hours24",regex:e=>e.numberRegExp(),input:(e,t)=>(24===(t=e.parseNumber(t))&&(t=0),t),output:(e,t)=>e.formatter.formatNumber(e.getHours()||24,t)},m:{key:"minutes",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getMinutes(),t)},s:{key:"seconds",regex:e=>e.numberRegExp(),input:(e,t)=>e.parseNumber(t),output:(e,t)=>e.formatter.formatNumber(e.getSeconds(),t)},S:{key:"milliseconds",regex:e=>e.numberRegExp(),input:e=>0,output:(e,t)=>e.formatter.formatNumber((""+Math.floor(1e3*(e.getMilliseconds()+e._fraction))).padEnd(t,"0").slice(0,t))},z:{output:(t,s)=>{5===s&&(s=1);const r=e.getType(s);return t.timeZoneName(r)}},Z:{key:"timeZone",regex:(e,t)=>{switch(t){case 5:return"[\\+\\-]\\d{2}\\:\\d{2}|Z";case 4:return"GMT[\\+\\-]\\d{2}\\:\\d{2}|GMT";default:return"[\\+\\-]\\d{4}"}},input:(e,t)=>t,output:(t,s)=>{const r=t.getTimeZoneOffset();let a=!0,n="";switch(s){case 5:if(!r)return"Z";break;case 4:if(n="GMT",!r)return n;break;default:a=!1}return n+e.formatOffset(r,a)}},O:{key:"timeZone",regex:(e,t)=>{switch(t){case 4:return"GMT[\\+\\-]\\d{2}\\:\\d{2}|GMT";default:return"GMT[\\+\\-]\\d{2}|GMT"}},input:(e,t)=>t,output:(t,s)=>{const r=t.getTimeZoneOffset();if(!r)return"GMT";let a=!1;switch(s){case 4:break;default:a=!0}return"GMT"+e.formatOffset(r,!0,a)}},V:{key:"timeZone",regex:e=>"([a-zA-Z_/]+)",input:(e,t)=>t,output:e=>e.getTimeZone()},X:{key:"timeZone",regex:(e,t)=>{switch(t){case 5:case 3:return"[\\+\\-]\\d{2}\\:\\d{2}|Z";case 4:case 2:return"[\\+\\-]\\d{4}|Z";default:return"[\\+\\-]\\d{2}(?:\\d{2})?|Z"}},input:(e,t)=>t,output:(t,s)=>{const r=t.getTimeZoneOffset();if(!r)return"Z";let a;switch(s){case 5:case 3:a=!0;break;default:a=!1}return e.formatOffset(r,a,1===s)}},x:{key:"timeZone",regex:(e,t)=>{switch(t){case 5:case 3:return"[\\+\\-]\\d{2}\\:\\d{2}";case 4:case 2:return"[\\+\\-]\\d{4}";default:return"[\\+\\-]\\d{2}(?:\\d{2})?"}},input:(e,t)=>t,output:(t,s)=>{let r;switch(s){case 5:case 3:r=!0;break;default:r=!1}return e.formatOffset(t.getTimeZoneOffset(),r,1===s)}}},e._weekStart={1:["af","am","ar-il","ar-sa","ar-ye","as","bn","bo","brx","ccp","ceb","chr","dav","dz","ebu","en","fil","gu","guz","haw","he","hi","id","ii","ja","jv","kam","ki","kln","km","kn","ko","kok","ks","lkt","lo","luo","luy","mas","mer","mgh","ml","mr","mt","my","nd","ne","om","or","pa","ps-pk","pt","qu","saq","sd","seh","sn","ta","te","th","ti","ug","ur","xh","yue","zh","zu"],7:["ar","ckb","en-ae","en-sd","fa","kab","lrc","mzn","ps"]},e._minimumDays={1:["af","af-na","af-za","agq","agq-cm","ak","ak-gh","am","am-et","ar","ar-001","ar-ae","ar-bh","ar-dj","ar-dz","ar-eg","ar-eh","ar-er","ar-il","ar-iq","ar-jo","ar-km","ar-kw","ar-lb","ar-ly","ar-ma","ar-mr","ar-om","ar-ps","ar-qa","ar-sa","ar-sd","ar-so","ar-ss","ar-sy","ar-td","ar-tn","ar-ye","as","as-in","asa","asa-tz","az","az-cyrl","az-cyrl-az","az-latn","az-latn-az","bas","bas-cm","be","be-by","bem","bem-zm","bez","bez-tz","bm","bm-ml","bn","bn-bd","bn-in","bo","bo-cn","bo-in","brx","brx-in","bs","bs-cyrl","bs-cyrl-ba","bs-latn","bs-latn-ba","ccp","ccp-bd","ccp-in","ceb","ceb-ph","cgg","cgg-ug","chr","chr-us","ckb","ckb-iq","ckb-ir","da-gl","dav","dav-ke","dje","dje-ne","dua","dua-cm","dyo","dyo-sn","dz","dz-bt","ebu","ebu-ke","ee","ee-gh","ee-tg","el-cy","en","en-001","en-150","en-ae","en-ag","en-ai","en-as","en-au","en-bb","en-bi","en-bm","en-bs","en-bw","en-bz","en-ca","en-cc","en-ck","en-cm","en-cx","en-cy","en-dg","en-dm","en-er","en-fk","en-fm","en-gd","en-gh","en-gm","en-gu","en-gy","en-hk","en-il","en-in","en-io","en-jm","en-ke","en-ki","en-kn","en-ky","en-lc","en-lr","en-ls","en-mg","en-mh","en-mo","en-mp","en-ms","en-mt","en-mu","en-mw","en-my","en-na","en-nf","en-ng","en-nr","en-nu","en-nz","en-pg","en-ph","en-pk","en-pn","en-pr","en-pw","en-rw","en-sb","en-sc","en-sd","en-sg","en-sh","en-si","en-sl","en-ss","en-sx","en-sz","en-tc","en-tk","en-to","en-tt","en-tv","en-tz","en-ug","en-um","en-us","en-us-posix","en-vc","en-vg","en-vi","en-vu","en-ws","en-za","en-zm","en-zw","eo","eo-001","es-419","es-ar","es-bo","es-br","es-bz","es-cl","es-co","es-cr","es-cu","es-do","es-ea","es-ec","es-gq","es-gt","es-hn","es-ic","es-mx","es-ni","es-pa","es-pe","es-ph","es-pr","es-py","es-sv","es-us","es-uy","es-ve","ewo","ewo-cm","fa","fa-af","fa-ir","ff","ff-latn","ff-latn-bf","ff-latn-cm","ff-latn-gh","ff-latn-gm","ff-latn-gn","ff-latn-gw","ff-latn-lr","ff-latn-mr","ff-latn-ne","ff-latn-ng","ff-latn-sl","ff-latn-sn","fil","fil-ph","fr-bf","fr-bi","fr-bj","fr-bl","fr-ca","fr-cd","fr-cf","fr-cg","fr-ci","fr-cm","fr-dj","fr-dz","fr-ga","fr-gn","fr-gq","fr-ht","fr-km","fr-ma","fr-mf","fr-mg","fr-ml","fr-mr","fr-mu","fr-nc","fr-ne","fr-pf","fr-pm","fr-rw","fr-sc","fr-sn","fr-sy","fr-td","fr-tg","fr-tn","fr-vu","fr-wf","fr-yt","gu","gu-in","guz","guz-ke","ha","ha-gh","ha-ne","ha-ng","haw","haw-us","he","he-il","hi","hi-in","hr","hr-ba","hr-hr","hy","hy-am","ia","ia-001","id","id-id","ig","ig-ng","ii","ii-cn","ja","ja-jp","jgo","jgo-cm","jmc","jmc-tz","jv","jv-id","ka","ka-ge","kab","kab-dz","kam","kam-ke","kde","kde-tz","kea","kea-cv","khq","khq-ml","ki","ki-ke","kk","kk-kz","kkj","kkj-cm","kl","kl-gl","kln","kln-ke","km","km-kh","kn","kn-in","ko","ko-kp","ko-kr","kok","kok-in","ks","ks-in","ksb","ksb-tz","ksf","ksf-cm","ku","ku-tr","ky","ky-kg","lag","lag-tz","lg","lg-ug","lkt","lkt-us","ln","ln-ao","ln-cd","ln-cf","ln-cg","lo","lo-la","lrc","lrc-iq","lrc-ir","lu","lu-cd","luo","luo-ke","luy","luy-ke","lv","lv-lv","mas","mas-ke","mas-tz","mer","mer-ke","mfe","mfe-mu","mg","mg-mg","mgh","mgh-mz","mgo","mgo-cm","mi","mi-nz","mk","mk-mk","ml","ml-in","mn","mn-mn","mr","mr-in","ms","ms-bn","ms-my","ms-sg","mt","mt-mt","mua","mua-cm","my","my-mm","mzn","mzn-ir","naq","naq-na","nd","nd-zw","ne","ne-in","ne-np","nl-aw","nl-bq","nl-cw","nl-sr","nl-sx","nmg","nmg-cm","nnh","nnh-cm","nus","nus-ss","nyn","nyn-ug","om","om-et","om-ke","or","or-in","os","os-ge","pa","pa-arab","pa-arab-pk","pa-guru","pa-guru-in","ps","ps-af","ps-pk","pt","pt-ao","pt-br","pt-cv","pt-gq","pt-gw","pt-mo","pt-mz","pt-st","pt-tl","qu","qu-bo","qu-ec","qu-pe","rn","rn-bi","ro","ro-md","ro-ro","rof","rof-tz","ru-by","ru-kg","ru-kz","ru-md","ru-ua","rw","rw-rw","rwk","rwk-tz","saq","saq-ke","sbp","sbp-tz","sd","sd-pk","seh","seh-mz","ses","ses-ml","sg","sg-cf","shi","shi-latn","shi-latn-ma","shi-tfng","shi-tfng-ma","si","si-lk","sl","sl-si","sn","sn-zw","so","so-dj","so-et","so-ke","so-so","sq","sq-al","sq-mk","sq-xk","sr","sr-cyrl","sr-cyrl-ba","sr-cyrl-me","sr-cyrl-rs","sr-cyrl-xk","sr-latn","sr-latn-ba","sr-latn-me","sr-latn-rs","sr-latn-xk","sw","sw-cd","sw-ke","sw-tz","sw-ug","ta","ta-in","ta-lk","ta-my","ta-sg","te","te-in","teo","teo-ke","teo-ug","tg","tg-tj","th","th-th","ti","ti-er","ti-et","tk","tk-tm","to","to-to","tr","tr-cy","tr-tr","twq","twq-ne","tzm","tzm-ma","ug","ug-cn","uk","uk-ua","ur","ur-in","ur-pk","uz","uz-arab","uz-arab-af","uz-cyrl","uz-cyrl-uz","uz-latn","uz-latn-uz","vai","vai-latn","vai-latn-lr","vai-vaii","vai-vaii-lr","vi","vi-vn","vun","vun-tz","wo","wo-sn","xh","xh-za","xog","xog-ug","yav","yav-cm","yi","yi-001","yo","yo-bj","yo-ng","yue","yue-hans","yue-hans-cn","yue-hant","yue-hant-hk","zgh","zgh-ma","zh","zh-hans","zh-hans-cn","zh-hans-hk","zh-hans-mo","zh-hans-sg","zh-hant","zh-hant-hk","zh-hant-mo","zh-hant-tw","zu","zu-za"],4:["ast","ast-es","bg","bg-bg","br","br-fr","ca","ca-ad","ca-es","ca-fr","ca-it","ce","ce-ru","cs","cs-cz","cy","cy-gb","da","da-dk","de","de-at","de-be","de-ch","de-de","de-it","de-li","de-lu","dsb","dsb-de","el","el-gr","en-at","en-be","en-ch","en-de","en-dk","en-fi","en-fj","en-gb","en-gg","en-gi","en-ie","en-im","en-je","en-nl","en-se","es","es-es","et","et-ee","eu","eu-es","fi","fi-fi","fo","fo-dk","fo-fo","fr","fr-be","fr-ch","fr-fr","fr-gf","fr-gp","fr-lu","fr-mc","fr-mq","fr-re","fur","fur-it","fy","fy-nl","ga","ga-gb","ga-ie","gd","gd-gb","gl","gl-es","gsw","gsw-ch","gsw-fr","gsw-li","gv","gv-im","hsb","hsb-de","hu","hu-hu","is","is-is","it","it-ch","it-it","it-sm","it-va","ksh","ksh-de","kw","kw-gb","lb","lb-lu","lt","lt-lt","nb","nb-no","nb-sj","nds","nds-de","nds-nl","nl","nl-be","nl-nl","nn","nn-no","os-ru","pl","pl-pl","pt-ch","pt-lu","pt-pt","rm","rm-ch","ru","ru-ru","sah","sah-ru","se","se-fi","se-no","se-se","sk","sk-sk","smn","smn-fi","sv","sv-ax","sv-fi","sv-se","tt","tt-ru","wae","wae-ch"]},Object.assign(e.prototype,{_getData(e,t){return e in this._data||(this._data[e]=t()),this._data[e]},_makeFormatter(e){return new Intl.DateTimeFormat(this.locale,{timeZone:"UTC",...e})}}),Object.assign(e.prototype,{getDayPeriods(e="long"){return this._getData(`periods[${e}]`,t=>{const s=this._makeFormatter({hour:"numeric",hourCycle:"h11",dayPeriod:e});return new Array(2).fill().map((e,t)=>s.formatToParts(Date.UTC(2018,0,1,12*t)).find(e=>"dayPeriod"===e.type).value)})},getDays(e="long",t=!0){return this._getData(`days[${t}][${e}]`,s=>{if(t){const t=this._makeFormatter({weekday:e});return new Array(7).fill().map((e,s)=>t.format(Date.UTC(2018,0,s)))}const r=this._makeFormatter({year:"numeric",month:"numeric",day:"numeric",weekday:e});return new Array(7).fill().map((e,t)=>r.formatToParts(Date.UTC(2018,0,t)).find(e=>"weekday"===e.type).value)})},getEras(e="long"){return this._getData(`eras[${e}]`,t=>{const s=this._makeFormatter({era:e});return new Array(2).fill().map((e,t)=>s.formatToParts(Date.UTC(t-1,0,1)).find(e=>"era"===e.type).value)})},getMonths(e="long",t=!0){return this._getData(`months[${t}][${e}]`,s=>{if(t){const t=this._makeFormatter({month:e});return new Array(12).fill().map((e,s)=>t.format(Date.UTC(2018,s,1)))}const r=this._makeFormatter({year:"numeric",month:e,day:"numeric"});return new Array(12).fill().map((e,t)=>r.formatToParts(Date.UTC(2018,t,1)).find(e=>"month"===e.type).value)})},getNumbers(){return this._getData("numbers",e=>{const t=this._makeFormatter({minute:"numeric"});return new Array(10).fill().map((e,s)=>t.format(Date.UTC(2018,0,1,0,s)))})},numberRegExp(){return`(?:${this.getNumbers().join("|")})+`}});class t{constructor(t=null,s={}){let r,a=!1;if(null===t)r=Date.now();else{if(t!==""+t)throw new Error("Invalid date supplied");if(r=Date.parse(t),isNaN(r))throw new Error("Invalid date string supplied");t.match(this.constructor._dateStringTimeZoneRegExp)||(r-=6e4*(new Date).getTimezoneOffset()),a=!0}this._utcDate=new Date(r),this._fraction=0,this._dynamicTz=!1,this.isValid=!0;let n=s.timeZone;n||(n=this.constructor.defaultTimeZone),["Z","GMT"].includes(n)&&(n="UTC");const i=n.match(this.constructor._offsetRegExp);i?(this._offset=60*i[2]+parseInt(i[4]||0),this._offset&&"+"===i[1]&&(this._offset*=-1),this._offset?this._timeZone=e.formatOffset(this._offset):(this._dynamicTz=!0,this._timeZone="UTC")):(this._dynamicTz=!0,this._timeZone=n),this._dynamicTz&&(this._makeFormatter(),this._checkOffset()),a&&this._adjustOffset(),this.formatter=e.load(s.locale),this.relativeFormatter=e.loadRelative(s.locale)}valueOf(){return this.getTime()}[Symbol.toPrimitive](e){return"number"===e?this.valueOf():this.toString()}}return Object.assign(t.prototype,{getDate(){return new Date(this._getOffsetTime()).getUTCDate()},getDay(){return new Date(this._getOffsetTime()).getUTCDay()},getDayOfYear(){return this.constructor.dayOfYear(this.getYear(),this.getMonth(),this.getDate())},getHours(){return new Date(this._getOffsetTime()).getUTCHours()},getLocale(){return this.formatter.locale},getMilliseconds(){return new Date(this._getOffsetTime()).getUTCMilliseconds()},getMinutes(){return new Date(this._getOffsetTime()).getUTCMinutes()},getMonth(){return new Date(this._getOffsetTime()).getUTCMonth()+1},getQuarter(){return Math.ceil((this.getMonth()+1)/3)},getSeconds(){return new Date(this._getOffsetTime()).getUTCSeconds()},getTime(){return this._utcDate.getTime()},getTimestamp(){return this.getTime()/1e3},getTimeZone(){return this._timeZone},getTimeZoneOffset(){return this._offset},getWeek(){const e=this.clone().startOf("day").setWeekDay(1),t=e.clone().setWeek(1,1);return 1+((e-t)/6048e5|0)},getWeekDay(){return this.formatter.weekDay(this.getDay())},getWeekDayInMonth(){const e=this.getWeek(),t=this.clone().setDate(1),s=t.getWeek(),r=t.getWeekDay()>this.getWeekDay()?0:1;return s>e?e+r:e-s+r},getWeekOfMonth(){const e=this.getWeek();let t=this.clone().setDate(1).getWeek();return t>e?e+1:e-t+1},getWeekYear(){const e=this.formatter.minimumDays();return this.clone().setWeekDay(7-e+1).getYear()},getYear(){return new Date(this._getOffsetTime()).getUTCFullYear()}}),Object.assign(t.prototype,{setDate(e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCDate(e))},setDay(e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCDate(this.getDate()-this.getDay()+parseInt(e)))},setDayOfYear(e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCMonth(0,e))},setHours(...e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCHours(...e))},setLocale(t){return this.formatter=e.load(t),this.relativeFormatter=e.loadRelative(t),this},setMilliseconds(e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCMilliseconds(e))},setMinutes(...e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCMinutes(...e))},setMonth(e,t=null){return null===t&&(t=this.getDate(),this.constructor.clampDates&&(t=Math.min(t,this.constructor.daysInMonth(this.getYear(),e)))),this._setOffsetTime(new Date(this._getOffsetTime()).setUTCMonth(e-1,t))},setQuarter(e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCMonth(3*e-3))},setSeconds(...e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCSeconds(...e))},setTime(e){return this._utcDate.setTime(e),this._dynamicTz&&this._checkOffset(),this},setTimestamp(e){return this.setTime(1e3*e)},setTimeZone(t,s=!1){["Z","GMT"].includes(t)&&(t="UTC"),this._dynamicTz=!1;const r=this._offset,a=t.match(this.constructor._offsetRegExp);return a?(this._offset=60*a[2]+parseInt(a[4]||0),this._offset&&"+"===a[1]&&(this._offset*=-1),this._offset?this._timeZone=e.formatOffset(this._offset):(this._dynamicTz=!0,this._timeZone="UTC")):(this._dynamicTz=!0,this._timeZone=t),this._dynamicTz&&(this._makeFormatter(),this._checkOffset()),s&&r!==this._offset&&this._utcDate.setTime(this._utcDate.getTime()-6e4*(r-this._offset)),this},setTimeZoneOffset(t){return this._dynamicTz=!1,this._offset=t||0,this._timeZone=e.formatOffset(this._offset),this._formatter=null,this},setWeek(e,t=null){null===t&&(t=this.getWeekDay());const s=this.formatter.minimumDays();return this.setYear(this.getWeekYear(),1,s+7*(e-1)).setWeekDay(t)},setWeekDay(e){return this._setOffsetTime(new Date(this._getOffsetTime()).setUTCDate(this.getDate()-this.getWeekDay()+parseInt(e)))},setWeekDayInMonth(e){return this.setDate(this.getDate()+7*(e-this.getWeekDayInMonth()))},setWeekOfMonth(e){return this.setDate(this.getDate()+7*(e-this.getWeekOfMonth()))},setWeekYear(e,s=null,r=null){const a=this.formatter.minimumDays();return null===s&&(s=Math.min(this.getWeek(),t.fromArray([e,1,a]).weeksInYear())),null===r&&(r=this.getWeekDay()),this.setYear(e,1,a+7*(s-1)).setWeekDay(r)},setYear(e,t=null,s=null){return null===t&&(t=this.getMonth()),this.constructor.clampDates&&null===s&&(s=Math.min(this.getDate(),this.constructor.daysInMonth(e,t))),this._setOffsetTime(new Date(this._getOffsetTime()).setUTCFullYear(e,t-1,s))}}),Object.assign(t.prototype,{_adjustOffset(){if(!this._offset)return;const e=this._offset;this._utcDate.setTime(this.getTime()+6e4*this._offset),this._dynamicTz&&(this._checkOffset(),e!==this._offset&&this._utcDate.setTime(this._utcDate.getTime()-6e4*(e-this._offset)))},_checkOffset(){this._offset="UTC"===this._timeZone?0:(new Date(this.constructor._utcFormatter.format(this))-new Date(this._formatter.format(this)))/6e4},_compare(e,t,s){if(!t){return s(this.getTime()-e.getTime())>=0}t=t.toLowerCase();for(const r of this.constructor._compareLookup){const a=!r.values.includes(t),n=r.method,i=s(this[n]()-e[n](),a);if(i<0)return!1;if(i>0)return!0;if(!a)break}return!0},_compensateDiff(e,t,s=!0,r=1){return e>0?(e=Math.floor(e),s&&this<t&&(e+=r)):e<0&&(e=Math.ceil(e),s&&this>t&&(e-=r)),e},_getBiggestDiff(e){const t={month:12,day:Math.min(this.daysInMonth(),e.daysInMonth()),hour:24,minute:60,second:60};let s;for(const r of["year","month","day","hour","minute","second"]){const a=this.diff(e,r);if(s&&Math.abs(a)>=t[r])return s;if(this.diff(e,r,!1))return[a,r];s=a?[a,r]:null}return s||[0,"second"]},_getOffsetTime(){return this.getTime()-6e4*this._offset},_makeFormatter(){this._formatter=new Intl.DateTimeFormat(this.constructor._formatterLocale,{...this.constructor._formatterOptions,timeZone:this.getTimeZone()})},_modify(e,t){switch(t=t.toLowerCase()){case"second":case"seconds":return this.setSeconds(this.getSeconds()+e);case"minute":case"minutes":return this.setMinutes(this.getMinutes()+e);case"hour":case"hours":return this.setHours(this.getHours()+e);case"week":case"weeks":return this.setDate(this.getDate()+7*e);case"day":case"days":return this.setDate(this.getDate()+e);case"month":case"months":return this.setMonth(this.getMonth()+e);case"year":case"years":return this.setYear(this.getYear()+e);default:throw new Error("Invalid time unit supplied")}},_setOffsetTime(e){return this.setTime(e+6e4*this._offset)}}),Object.assign(t.prototype,{add(e,t){return this._modify(e,t)},endOf(e){switch(e=e.toLowerCase()){case"second":return this.setMilliseconds(999);case"minute":return this.setSeconds(59,999);case"hour":return this.setMinutes(59,59,999);case"day":case"date":return this.setHours(23,59,59,999);case"week":return this.setWeekDay(7).setHours(23,59,59,999);case"month":return this.setDate(this.daysInMonth()).setHours(23,59,59,999);case"quarter":const e=3*this.getQuarter();return this.setMonth(e,this.constructor.daysInMonth(this.getYear(),e)).setHours(23,59,59,999);case"year":return this.setMonth(12,31).setHours(23,59,59,999);default:throw new Error("Invalid time unit supplied")}},startOf(e){switch(e=e.toLowerCase()){case"second":return this.setMilliseconds(0);case"minute":return this.setSeconds(0,0);case"hour":return this.setMinutes(0,0,0);case"day":case"date":return this.setHours(0,0,0,0);case"week":return this.setWeekDay(1).setHours(0,0,0,0);case"month":return this.setDate(1).setHours(0,0,0,0);case"quarter":const e=3*this.getQuarter()-2;return this.setMonth(e,1).setHours(0,0,0,0);case"year":return this.setMonth(1,1).setHours(0,0,0,0);default:throw new Error("Invalid time unit supplied")}},sub(e,t){return this._modify(-e,t)}}),Object.assign(t.prototype,{format(t){let s,r="";for(;t&&(s=t.match(this.constructor._formatTokenRegExp));){const a=s[1],n=s.index,i=s[0].length;if(n&&(r+=t.substring(0,n)),t=t.substring(n+i),a){if(!(a in e._formatDate))throw new Error("Invalid token in DateTime format: "+a);r+=e._formatDate[a].output(this,i)}else r+=s[0].slice(1,-1)}return r+=t,r},toDateString(){return this.format(this.constructor.formats.date)},toISOString(){return this.constructor.fromDate(this._utcDate,{locale:"en",timeZone:"UTC"}).format(this.constructor.formats.rfc3339_extended)},toString(){return this.format(this.constructor.formats.string)},toTimeString(){return this.format(this.constructor.formats.time)},toUTCString(){return this.constructor.fromDate(this._utcDate,{locale:this.getLocale(),timeZone:"UTC"}).toString()}}),Object.assign(t.prototype,{clone(){return this.constructor.fromTimestamp(this.getTimestamp(),{locale:this.getLocale(),timeZone:this.getTimeZone()})},dayName(e="long"){return this.formatter.formatDay(this.getDay(),e)},dayPeriod(e="long"){return this.formatter.formatDayPeriod(this.getHours()<12?0:1,e)},daysInMonth(){return this.constructor.daysInMonth(this.getYear(),this.getMonth())},daysInYear(){return this.constructor.daysInYear(this.getYear())},diff(e,t,s=!0){if(e||(e=new this.constructor),!t)return this-e;switch(t&&(t=t.toLowerCase()),e=e.clone().setTimeZone(this.getTimeZone()),t){case"year":case"years":return this._compensateDiff(this.getYear()-e.getYear(),e.setYear(this.getYear()),!s,-1);case"month":case"months":return this._compensateDiff(12*(this.getYear()-e.getYear())+this.getMonth()-e.getMonth(),e.setYear(this.getYear(),this.getMonth()),!s,-1);case"day":case"days":return this._compensateDiff((this-e)/864e5,e.setYear(this.getYear(),this.getMonth(),this.getDate()),s);case"hour":case"hours":return this._compensateDiff((this-e)/36e5,e.setYear(this.getYear(),this.getMonth(),this.getDate()).setHours(this.getHours()),s);case"minute":case"minutes":return this._compensateDiff((this-e)/6e4,e.setYear(this.getYear(),this.getMonth(),this.getDate()).setHours(this.getHours(),this.getMinutes()),s);case"second":case"seconds":return this._compensateDiff((this-e)/1e3,e.setYear(this.getYear(),this.getMonth(),this.getDate()).setHours(this.getHours(),this.getMinutes(),this.getSeconds()),s);default:throw new Error("Invalid time unit supplied")}},era(e="long"){return this.formatter.formatEra(this.getYear()<0?0:1,e)},humanDiff(e,t){let s;return e||(e=new this.constructor),t?s=this.diff(e,t):[s,t]=this._getBiggestDiff(e),this.relativeFormatter.format(s,t)},isAfter(e,t){return this._compare(e,t,(e,t)=>e>0?1:e<0||!e&&!t?-1:0)},isBefore(e,t){return this._compare(e,t,(e,t)=>e<0?1:e>0||!e&&!t?-1:0)},isBetween(e,t,s){return this.isAfter(e,s)&&this.isBefore(t,s)},isDST(){if(!this._dynamicTz)return!1;const e=this.getYear(),s=t.fromArray([e,1,1],{timeZone:this.getTimeZone()}),r=t.fromArray([e,6,1],{timeZone:this.getTimeZone()});return this._offset<Math.max(s._offset,r._offset)},isLeapYear(){return this.constructor.isLeapYear(this.getYear())},isSame(e,t){return this._compare(e,t,e=>e?-1:0)},isSameOrAfter(e,t){return this._compare(e,t,e=>e>0?1:e<0?-1:0)},isSameOrBefore(e,t){return this._compare(e,t,e=>e<0?1:e>0?-1:0)},monthName(e="long"){return this.formatter.formatMonth(this.getMonth(),e)},timeZoneName(t="long"){return this._dynamicTz?this.formatter.formatTimeZoneName(this._utcDate,this.getTimeZone(),t):e.formatOffset(this.getTimeZoneOffset(),!0,"short"===t)},weeksInYear(){return this.clone().setMonth(12,28).getWeek()}}),Object.assign(t,{fromArray(e,t={}){const s=e.slice(0,3),r=e.slice(3);return s.length<3&&s.push(...new Array(3-s.length).fill(1)),r.length<4&&r.push(...new Array(4-r.length).fill(0)),new this(null,t).setTimestamp(0).setYear(...s).setHours(...r)},fromDate(e,t={}){return new this(null,t).setTime(e.getTime())},fromFormat(t,s,r={}){const a=e.load(r.locale),n=[];let i;for(;t&&(i=t.match(this._formatTokenRegExp));){const r=i[1],o=i.index,u=i[0].length;if(o){const e=t.substring(0,o);this._parseCompare(e,s)}if(t=t.substring(o+u),s=s.substring(o),!r){const e=i[0].slice(1,-1);this._parseCompare(e||"'",s),s=s.substring(e.length);continue}if(!(r in e._formatDate))throw new Error("Invalid token in DateTime format: "+r);const m=e._formatDate[r].regex(a,u),h=s.match(new RegExp("^"+m));if(!h)throw new Error("Unmatched token in DateTime string: "+r);const f=h[0],c=e._formatDate[r].key,g=e._formatDate[r].input(a,f,u);n.push({key:c,value:g,literal:f,token:r,length:u}),s=s.substring(f.length)}t&&this._parseCompare(t,s),"timeZone"in r||(r.timeZone=this.defaultTimeZone);let o=r.timeZone;for(const{key:e,value:t}of n)"timeZone"===e&&(o=t);let u=this.fromTimestamp(0,{locale:r.locale,timeZone:o});const m=this._parseFactory(),h=[];for(const e of this._parseOrderKeys)for(const t of e)for(const e of n){const{key:s,value:r,literal:a,token:n,length:i}=e;if(s===t){if(5===i&&["M","L","E","e","c"].includes(n)){const e=n.repeat(i);if(u.format(e)===a)continue}u=m[s].set(u,r),h.push(e)}}let f=!0;for(const{key:e,value:t}of h)if(e in m&&m[e].get(u)!==t){f=!1;break}return r.timeZone!==o&&(u=u.setTimeZone(r.timeZone)),u.isValid=f,u},fromISOString(e,t={}){let s=this.fromFormat(this.formats.rfc3339_extended,e,{locale:"en"});return"timeZone"in t&&(s=s.setTimeZone(t.timeZone)),"locale"in t&&(s=s.setLocale(t.locale)),s},fromTimestamp(e,t={}){return new this(null,t).setTimestamp(e)},now(e={}){return new this(null,e)}}),Object.assign(t,{_parseCompare(e,t){let s=0;for(const r of e){if(r!==t[s])throw new Error("Unmatched character in DateTime string: "+r);s++}},_parseFactory(){let e=!1,t=!0;return{date:{get:e=>e.getDate(),set:(e,t)=>e.setDate(t)},dayPeriod:{get:e=>e.getHours()<12?0:1,set:(s,r)=>{e=r;let a=r?12:0;return t&&(a+=s.getHours()),s.setHours(a)}},dayOfYear:{get:e=>e.getDayOfYear(),set:(e,t)=>e.setDayOfYear(t)},era:{get:e=>e.getYear()<1?0:1,set:(e,t)=>{const s=t?1:-1;return e.setYear(e.getYear()*s)}},hours12:{get:e=>e.getHours()%12,set:(s,r)=>(e&&(r+=12),t=!0,s.setHours(r))},hours24:{get:e=>e.getHours(),set:(e,s)=>(t=!1,e.setHours(s))},milliseconds:{get:e=>e.getMilliseconds(),set:(e,t)=>e.setMilliseconds(t)},minutes:{get:e=>e.getMinutes(),set:(e,t)=>e.setMinutes(t)},month:{get:e=>e.getMonth(),set:(e,t)=>e.setMonth(t)},quarter:{get:e=>e.getQuarter(),set:(e,t)=>e.setQuarter(t)},seconds:{get:e=>e.getSeconds(),set:(e,t)=>e.setSeconds(t)},week:{get:e=>e.getWeek(),set:(e,t)=>e.setWeek(t)},weekDay:{get:e=>e.getWeekDay(),set:(e,t)=>e.setWeekDay(t)},weekDayInMonth:{get:e=>e.getWeekDayInMonth(),set:(e,t)=>e.setWeekDayInMonth(t)},weekOfMonth:{get:e=>e.getWeekOfMonth(),set:(e,t)=>e.setWeekOfMonth(t)},weekYear:{get:e=>e.getWeekYear(),set:(e,t)=>e.setWeekYear(t)},year:{get:e=>e.getYear(),set:(e,t)=>e.setYear(t)}}}}),Object.assign(t,{dayOfYear(e,t,s){return new Array(t-1).fill().reduce((t,s,r)=>t+this.daysInMonth(e,r+1),s)},daysInMonth(e,t){const s=new Date(Date.UTC(e,t-1));return t=s.getUTCMonth(),this._monthDays[t]+(1==t&&this.isLeapYear(s.getUTCFullYear())?1:0)},daysInYear(e){return this.isLeapYear(e)?366:365},isLeapYear:e=>29===new Date(e,1,29).getDate()}),Object.assign(t,{clampDates:!0,defaultTimeZone:Intl.DateTimeFormat().resolvedOptions().timeZone,formats:{atom:"yyyy-MM-dd'T'HH:mm:ssxxx",cookie:"eeee, dd-MMM-yyyy HH:mm:ss ZZZZ",date:"eee MMM dd yyyy",iso8601:"yyyy-MM-dd'T'HH:mm:ssxx",rfc822:"eee, dd MMM yy HH:mm:ss xx",rfc850:"eeee dd-MMM-yy HH:mm:ss ZZZZ",rfc1036:"eee, dd MMM yy HH:mm:ss xx",rfc1123:"eee, dd MMM yyyy HH:mm:ss xx",rfc2822:"eee, dd MMM yyyy HH:mm:ss xx",rfc3339:"yyyy-MM-dd'T'HH:mm:ssxxx",rfc3339_extended:"yyyy-MM-dd'T'HH:mm:ss.SSSxxx",rss:"eee, dd MMM yyyy HH:mm:ss xx",string:"eee MMM dd yyyy HH:mm:ss xx (VV)",time:"HH:mm:ss xx (VV)",w3c:"yyyy-MM-dd'T'HH:mm:ssxxx"},_compareLookup:[{values:["year"],method:"getYear"},{values:["month"],method:"getMonth"},{values:["day","date"],method:"getDate"},{values:["hour"],method:"getHours"},{values:["minute"],method:"getMinutes"},{values:["second"],method:"getSeconds"}],_formatterLocale:"en",_formatterOptions:{timeZone:"UTC",hourCycle:"h23",year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric"},_monthDays:[31,28,31,30,31,30,31,31,30,31,30,31],_seperators:[";",":","/",".",",","-","(",")"],_dateStringTimeZoneRegExp:/\s(?:UTC|GMT|Z|[\+\-]\d)|\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}\.\d{3}[\+\-]\d{2}\:\d{2}/i,_formatTokenRegExp:/([a-z])\1*|'[^']*'/i,_offsetRegExp:/(?:GMT)?([\+\-])(\d{2})(\:?)(\d{2})?/,_parseOrderKeys:[["year","weekYear"],["era"],["quarter","month","week","dayOfYear"],["weekOfMonth"],["date","weekDay"],["weekDayInMonth"],["hours24","hours12","dayPeriod"],["minutes","seconds","milliseconds"]]}),t._utcFormatter=new Intl.DateTimeFormat(t._formatterLocale,t._formatterOptions),{DateFormatter:e,DateTime:t,DateTimeImmutable:class extends t{setLocale(e){return this.constructor.fromDate(this._utcDate,{locale:e,timeZone:this.getTimeZone()})}setTime(e){const t=new this.constructor(null,{locale:this.getLocale(),timeZone:this.getTimeZone()});return t._utcDate.setTime(e),t._dynamicTz&&t._checkOffset(),t}setTimeZone(e){return this.constructor.fromDate(this._utcDate,{locale:this.getLocale(),timeZone:e})}setTimeZoneOffset(t){return this.constructor.fromDate(this._utcDate,{locale:this.getLocale(),timeZone:e.formatOffset(t)})}}}}));