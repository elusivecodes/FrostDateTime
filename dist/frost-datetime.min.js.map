{"version":3,"names":["data","getData","key","callback","getDateFormatter","timeZone","_","makeFormatter","hourCycle","year","month","day","hour","minute","locale","options","Intl","DateTimeFormat","resolvedOptions","config","clampDates","defaultLocale","defaultTimeZone","dateStringTimeZoneRegExp","formats","formatTokenRegExp","monthDays","offsetRegExp","parseOrderKeys","thresholds","week","second","compensateDiff","date","other","amount","compensate","compensation","Math","floor","ceil","getOffset","getTimeZone","utcString","format","localString","Date","getOffsetTime","getTime","getTimeZoneOffset","modify","timeUnit","toLowerCase","setSeconds","getSeconds","setMinutes","getMinutes","setHours","getHours","setDate","getDate","setMonth","getMonth","setYear","getYear","Error","parseCompare","formatString","dateString","i","char","setOffsetTime","time","setTime","getDayPeriods","type","dayPeriodFormatter","Array","fill","map","index","formatToParts","UTC","find","part","value","getDays","standalone","dayFormatter","weekday","getEras","eraFormatter","era","getMonths","monthFormatter","getNumbers","numberFormatter","numberRegExp","join","formatDay","formatMonth","formatNumber","number","padding","numbers","padStart","replace","match","formatOffset","offset","useColon","optionalMinutes","hours","abs","minutes","sign","hourString","minuteString","DateTime","constructor","timestamp","adjustOffset","now","isNaN","parseInt","isFinite","parse","getTimezoneOffset","this","_date","_dynamicTz","isValid","includes","_offset","_timeZone","oldOffset","_locale","getLocale","setLocale","setTimeZone","setTimeZoneOffset","valueOf","Symbol","toPrimitive","hint","toString","weekStart","minDaysInFirstWeek","getType","length","minimumDays","minDays","localeTest","split","days","hasOwnProperty","call","pop","weekDay","weekStarted","start","weekStartOffset","parseDay","indexOf","parseMonth","parseNumber","tokens","G","maxLength","regex","input","parseEra","output","datetime","y","slice","Y","getWeekYear","Q","getQuarter","q","M","L","w","getWeek","W","getWeekOfMonth","d","D","getDayOfYear","F","getWeekDayInMonth","E","getDay","e","getWeekDay","c","a","parseDayPeriod","dayPeriod","h","H","K","k","m","s","S","getMilliseconds","padEnd","z","timeZoneName","Z","prefix","O","V","X","x","dayOfYear","reduce","daysInMonth","getUTCMonth","isLeapYear","getUTCFullYear","daysInYear","_daysInMonth","_daysInYear","fromArray","dateArray","dateValues","timeValues","push","setTimestamp","fromDate","fromFormat","values","token","position","substring","literal","regExp","matchedValue","RegExp","fromTimestamp","methods","isPM","lastAM","get","set","setDayOfYear","hours12","hours24","milliseconds","setMilliseconds","quarter","setQuarter","seconds","setWeek","setWeekDay","weekDayInMonth","setWeekDayInMonth","weekOfMonth","setWeekOfMonth","weekYear","setWeekYear","parseFactory","testValues","subKeys","subKey","fullToken","repeat","fromISOString","getDefaultLocale","getDefaultTimeZone","_isLeapYear","setDateClamping","setDefaultLocale","setDefaultTimeZone","proto","prototype","add","dayName","period","formatDayPeriod","diff","relative","yearDiff","monthDiff","weekDiff","dayDiff","hourDiff","minuteDiff","secondDiff","endOf","formatEra","getUTCDate","getUTCDay","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCSeconds","getTimestamp","thisWeek","startOf","firstWeek","first","humanDiff","relativeFormatter","RelativeTimeFormat","numeric","style","lastResult","relativeDiff","getBiggestDiff","isAfter","granularity","isBefore","isBetween","end","isDST","dateA","dateB","max","isSame","isSameOrAfter","isSameOrBefore","monthName","setUTCDate","setDay","setUTCMonth","args","setUTCHours","setUTCMilliseconds","setUTCMinutes","min","setUTCSeconds","weeksInYear","setUTCFullYear","sub","formatTimeZoneName","toDateString","toISOString","toTimeString","toUTCString"],"sources":["../src/factory.js","../src/vars.js","../src/helpers.js","../src/formatter/values.js","../src/formatter/format.js","../src/date-time.js","../src/formatter/locales.js","../src/formatter/utility.js","../src/formatter/parse.js","../src/formatter/tokens.js","../src/static/utility.js","../src/index.js","../src/static/create.js","../src/prototype/manipulate.js","../src/prototype/utility.js","../src/prototype/output.js","../src/prototype/attributes-get.js","../src/prototype/attributes-set.js"],"sourcesContent":["/**\n * DateTime Factory\n */\n\nconst data = {};\n\n/**\n * Get values from cache (or generate if they don't exist).\n * @param {string} key The key for the values.\n * @param {function} callback The callback to generate the values.\n * @return {array} The cached values.\n */\nexport function getData(key, callback) {\n    if (!(key in data)) {\n        data[key] = callback();\n    }\n\n    return data[key];\n};\n\n/**\n * Create a new date formatter for a timeZone.\n * @param {string} timeZone The timeZone.\n * @param {object} options The options for the formatter.\n * @return {Intl.DateTimeFormat} A new DateTimeFormat object.\n */\nexport function getDateFormatter(timeZone) {\n    return getData(\n        `dateFormatter.${timeZone}`,\n        (_) => makeFormatter('en', {\n            timeZone,\n            hourCycle: 'h23',\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n        }),\n    );\n};\n\n/**\n * Create a new relative formatter for a locale.\n * @param {string} locale The locale.\n * @param {object} options The options for the formatter.\n * @return {Intl.RelativeTimeFormat} A new RelativeTimeFormat object.\n */\nexport function getRelativeFormatter(locale) {\n    if (!('RelativeTimeFormat' in Intl)) {\n        return null;\n    }\n\n    return getData(\n        `relativeFormatter.${locale}`,\n        (_) => new Intl.RelativeTimeFormat(locale, {\n            numeric: 'auto',\n            style: 'long',\n        }),\n    );\n};\n\n/**\n * Create a new formatter for a locale.\n * @param {string} locale The locale.\n * @param {object} options The options for the formatter.\n * @return {Intl.DateTimeFormat} A new DateTimeFormat object.\n */\nexport function makeFormatter(locale, options) {\n    return new Intl.DateTimeFormat(locale, {\n        timeZone: 'UTC',\n        ...options,\n    });\n};\n","/**\n * DateTime Variables\n */\n\nconst resolvedOptions = (new Intl.DateTimeFormat).resolvedOptions();\n\nexport const config = {\n    clampDates: true,\n    defaultLocale: resolvedOptions.locale,\n    defaultTimeZone: resolvedOptions.timeZone,\n};\n\nexport const dateStringTimeZoneRegExp = /\\s(?:UTC|GMT|Z|[\\+\\-]\\d)|\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}\\:\\d{2}\\:\\d{2}\\.\\d{3}[\\+\\-]\\d{2}\\:\\d{2}/i;\n\nexport const formats = {\n    date: 'eee MMM dd yyyy',\n    rfc3339_extended: `yyyy-MM-dd'T'HH:mm:ss.SSSxxx`,\n    string: 'eee MMM dd yyyy HH:mm:ss xx (VV)',\n    time: 'HH:mm:ss xx (VV)',\n};\n\nexport const formatTokenRegExp = /([a-z])\\1*|'[^']*'/i;\n\nexport const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nexport const offsetRegExp = /(?:GMT)?([\\+\\-])(\\d{2})(\\:?)(\\d{2})?/;\n\nexport const parseOrderKeys = [\n    ['year', 'weekYear'],\n    ['era'],\n    ['quarter', 'month', 'week', 'dayOfYear'],\n    ['weekOfMonth'],\n    ['date', 'weekDay'],\n    ['weekDayInMonth'],\n    ['hours24', 'hours12', 'dayPeriod'],\n    ['minutes', 'seconds', 'milliseconds'],\n];\n\nexport const thresholds = {\n    month: 12,\n    week: null,\n    day: 7,\n    hour: 24,\n    minute: 60,\n    second: 60,\n};\n","import { getDateFormatter } from './factory.js';\nimport { thresholds } from './vars.js';\n\n/**\n * DateTime Helpers\n */\n\n/**\n * Compensate the difference between two dates.\n * @param {DateTime} date The DateTime.\n * @param {DateTime} other The DateTime to compare to.\n * @param {number} amount The amount to compensate.\n * @param {Boolean} [compensate=true] Whether to compensate the amount.\n * @param {number} [compensation=1] The compensation offset.\n * @return {number} The compensated amount.\n */\nexport function compensateDiff(date, other, amount, compensate = true, compensation = 1) {\n    if (amount > 0) {\n        amount = Math.floor(amount);\n\n        if (compensate && date < other) {\n            amount += compensation;\n        }\n    } else if (amount < 0) {\n        amount = Math.ceil(amount);\n\n        if (compensate && date > other) {\n            amount -= compensation;\n        }\n    }\n\n    return amount;\n};\n\n/**\n * Get the biggest difference between two dates.\n * @param {DateTime} date The DateTime.\n * @param {DateTime} [other] The DateTime to compare to.\n * @return {array} The biggest difference (amount and time unit).\n */\nexport function getBiggestDiff(date, other) {\n    let lastResult;\n    for (const timeUnit of ['year', 'month', 'week', 'day', 'hour', 'minute', 'second']) {\n        const relativeDiff = date.diff(other, { timeUnit });\n        if (lastResult && thresholds[timeUnit] && Math.abs(relativeDiff) >= thresholds[timeUnit]) {\n            return lastResult;\n        }\n\n        const actualDiff = date.diff(other, { timeUnit, relative: false });\n        if (actualDiff) {\n            return [relativeDiff, timeUnit];\n        }\n\n        if (relativeDiff) {\n            lastResult = [relativeDiff, timeUnit];\n        } else {\n            lastResult = null;\n        }\n    }\n\n    return lastResult ?\n        lastResult :\n        [0, 'second'];\n};\n\n/**\n * Get the offset for a DateTime.\n * @param {DateTime} date The DateTime.\n * @return {number} The offset.\n */\nexport function getOffset(date) {\n    const timeZone = date.getTimeZone();\n\n    if (timeZone === 'UTC') {\n        return 0;\n    }\n\n    const utcString = getDateFormatter('UTC').format(date);\n    const localString = getDateFormatter(timeZone).format(date);\n\n    return (new Date(utcString) - new Date(localString)) / 60000;\n};\n\n/**\n * Get the number of milliseconds since the UNIX epoch (offset to timeZone).\n * @param {DateTime} date The DateTime.\n * @return {number} The number of milliseconds since the UNIX epoch (offset to timeZone).\n */\nexport function getOffsetTime(date) {\n    return date.getTime() - (date.getTimeZoneOffset() * 60000);\n};\n\n/**\n * Modify a DateTime by a duration.\n * @param {DateTime} date The DateTime.\n * @param {number} amount The amount to modify the date by.\n * @param {string} [timeUnit] The unit of time.\n * @return {DateTime} The DateTime object.\n */\nexport function modify(date, amount, timeUnit) {\n    timeUnit = timeUnit.toLowerCase();\n\n    switch (timeUnit) {\n        case 'second':\n        case 'seconds':\n            return date.setSeconds(\n                date.getSeconds() + amount,\n            );\n        case 'minute':\n        case 'minutes':\n            return date.setMinutes(\n                date.getMinutes() + amount,\n            );\n        case 'hour':\n        case 'hours':\n            return date.setHours(\n                date.getHours() + amount,\n            );\n        case 'week':\n        case 'weeks':\n            return date.setDate(\n                date.getDate() + (amount * 7),\n            );\n        case 'day':\n        case 'days':\n            return date.setDate(\n                date.getDate() + amount,\n            );\n        case 'month':\n        case 'months':\n            return date.setMonth(\n                date.getMonth() + amount,\n            );\n        case 'year':\n        case 'years':\n            return date.setYear(\n                date.getYear() + amount,\n            );\n        default:\n            throw new Error('Invalid time unit supplied');\n    }\n};\n\n/**\n * Compare a literal format string with a date string.\n * @param {string} formatString The literal format string.\n * @param {string} dateString The date string.\n */\nexport function parseCompare(formatString, dateString) {\n    let i = 0;\n    for (const char of formatString) {\n        if (char !== dateString[i]) {\n            throw new Error(`Unmatched character in DateTime string: ${char}`);\n        }\n\n        i++;\n    }\n};\n\n/**\n * Generate methods for parsing a date.\n * @return {object} An object containing date parsing methods.\n */\nexport function parseFactory() {\n    let isPM = false;\n    let lastAM = true;\n\n    return {\n        date: {\n            get: (datetime) => datetime.getDate(),\n            set: (datetime, value) => datetime.setDate(value),\n        },\n        dayPeriod: {\n            get: (datetime) => datetime.getHours() < 12 ? 0 : 1,\n            set: (datetime, value) => {\n                isPM = value;\n                let hours = value ? 12 : 0;\n                if (lastAM) {\n                    hours += datetime.getHours();\n                }\n                return datetime.setHours(hours);\n            },\n        },\n        dayOfYear: {\n            get: (datetime) => datetime.getDayOfYear(),\n            set: (datetime, value) => datetime.setDayOfYear(value),\n        },\n        era: {\n            get: (datetime) => datetime.getYear() < 1 ? 0 : 1,\n            set: (datetime, value) => {\n                const offset = value ? 1 : -1;\n                return datetime.setYear(\n                    datetime.getYear() * offset,\n                );\n            },\n        },\n        hours12: {\n            get: (datetime) => datetime.getHours() % 12,\n            set: (datetime, value) => {\n                if (isPM) {\n                    value += 12;\n                }\n                lastAM = true;\n                return datetime.setHours(value);\n            },\n        },\n        hours24: {\n            get: (datetime) => datetime.getHours(),\n            set: (datetime, value) => {\n                lastAM = false;\n                return datetime.setHours(value);\n            },\n        },\n        milliseconds: {\n            get: (datetime) => datetime.getMilliseconds(),\n            set: (datetime, value) => datetime.setMilliseconds(value),\n        },\n        minutes: {\n            get: (datetime) => datetime.getMinutes(),\n            set: (datetime, value) => datetime.setMinutes(value),\n        },\n        month: {\n            get: (datetime) => datetime.getMonth(),\n            set: (datetime, value) => datetime.setMonth(value),\n        },\n        quarter: {\n            get: (datetime) => datetime.getQuarter(),\n            set: (datetime, value) => datetime.setQuarter(value),\n        },\n        seconds: {\n            get: (datetime) => datetime.getSeconds(),\n            set: (datetime, value) => datetime.setSeconds(value),\n        },\n        week: {\n            get: (datetime) => datetime.getWeek(),\n            set: (datetime, value) => datetime.setWeek(value),\n        },\n        weekDay: {\n            get: (datetime) => datetime.getWeekDay(),\n            set: (datetime, value) => datetime.setWeekDay(value),\n        },\n        weekDayInMonth: {\n            get: (datetime) => datetime.getWeekDayInMonth(),\n            set: (datetime, value) => datetime.setWeekDayInMonth(value),\n        },\n        weekOfMonth: {\n            get: (datetime) => datetime.getWeekOfMonth(),\n            set: (datetime, value) => datetime.setWeekOfMonth(value),\n        },\n        weekYear: {\n            get: (datetime) => datetime.getWeekYear(),\n            set: (datetime, value) => datetime.setWeekYear(value),\n        },\n        year: {\n            get: (datetime) => {\n                const year = datetime.getYear();\n                return Math.abs(year);\n            },\n            set: (datetime, value) => datetime.setYear(value),\n        },\n    };\n};\n\n/**\n * Set the number of milliseconds since the UNIX epoch (offset to timeZone).\n * @param {DateTime} date The DateTime.\n * @param {number} time The number of milliseconds since the UNIX epoch (offset to timeZone).\n * @return {DateTime} The DateTime object.\n */\nexport function setOffsetTime(date, time) {\n    return date.setTime(time + (date.getTimeZoneOffset() * 60000));\n};\n","import { getData, makeFormatter } from './../factory.js';\n\n/**\n * DateFormatter Values\n */\n\n/**\n * Get cached day period values.\n * @param {string} locale The locale.\n * @param {string} [type=long] The formatting type.\n * @return {array} The cached values.\n */\nexport function getDayPeriods(locale, type = 'long') {\n    return getData(\n        `periods.${locale}.${type}`,\n        (_) => {\n            const dayPeriodFormatter = makeFormatter(locale, { hour: 'numeric', hourCycle: 'h11' });\n            return new Array(2)\n                .fill()\n                .map((_, index) =>\n                    dayPeriodFormatter.formatToParts(Date.UTC(2018, 0, 1, index * 12))\n                        .find((part) => part.type === 'dayPeriod')\n                        .value,\n                );\n        },\n    );\n};\n\n/**\n * Get cached day values.\n * @param {string} locale The locale.\n * @param {string} [type=long] The formatting type.\n * @param {Boolean} [standalone=true] Whether the values are standalone.\n * @return {array} The cached values.\n */\nexport function getDays(locale, type = 'long', standalone = true) {\n    return getData(\n        `days.${locale}.${type}.${standalone}`,\n        (_) => {\n            if (standalone) {\n                const dayFormatter = makeFormatter(locale, { weekday: type });\n                return new Array(7)\n                    .fill()\n                    .map((_, index) =>\n                        dayFormatter.format(Date.UTC(2018, 0, index)),\n                    );\n            }\n\n            const dayFormatter = makeFormatter(locale, { year: 'numeric', month: 'numeric', day: 'numeric', weekday: type });\n            return new Array(7)\n                .fill()\n                .map((_, index) =>\n                    dayFormatter.formatToParts(Date.UTC(2018, 0, index))\n                        .find((part) => part.type === 'weekday')\n                        .value,\n                );\n        },\n    );\n};\n\n/**\n * Get cached era values.\n * @param {string} locale The locale.\n * @param {string} [type=long] The formatting type.\n * @return {array} The cached values.\n */\nexport function getEras(locale, type = 'long') {\n    return getData(\n        `eras.${locale}.${type}`,\n        (_) => {\n            const eraFormatter = makeFormatter(locale, { era: type });\n            return new Array(2)\n                .fill()\n                .map((_, index) =>\n                    eraFormatter.formatToParts(Date.UTC(index - 1, 0, 1))\n                        .find((part) => part.type === 'era')\n                        .value,\n                );\n        },\n    );\n};\n\n/**\n * Get cached month values.\n * @param {string} locale The locale.\n * @param {string} [type=long] The formatting type.\n * @param {Boolean} [standalone=true] Whether the values are standalone.\n * @return {array} The cached values.\n */\nexport function getMonths(locale, type = 'long', standalone = true) {\n    return getData(\n        `months.${locale}.${type}.${standalone}`,\n        (_) => {\n            if (standalone) {\n                const monthFormatter = makeFormatter(locale, { month: type });\n                return new Array(12)\n                    .fill()\n                    .map((_, index) =>\n                        monthFormatter.format(Date.UTC(2018, index, 1)),\n                    );\n            }\n\n            const monthFormatter = makeFormatter(locale, { year: 'numeric', month: type, day: 'numeric' });\n            return new Array(12)\n                .fill()\n                .map((_, index) =>\n                    monthFormatter.formatToParts(Date.UTC(2018, index, 1))\n                        .find((part) => part.type === 'month')\n                        .value,\n                );\n        },\n    );\n};\n\n/**\n * Get cached number values.\n * @param {string} locale The locale.\n * @return {array} The cached values.\n */\nexport function getNumbers(locale) {\n    return getData(\n        `numbers.${locale}`,\n        (_) => {\n            const numberFormatter = makeFormatter(locale, { minute: 'numeric' });\n            return new Array(10)\n                .fill()\n                .map((_, index) =>\n                    numberFormatter.format(Date.UTC(2018, 0, 1, 0, index)),\n                );\n        },\n    );\n};\n\n/**\n * Get the RegExp for the number values.\n * @param {string} locale The locale.\n * @return {string} The number values RegExp.\n */\nexport function numberRegExp(locale) {\n    const numbers = getNumbers(locale).join('|');\n    return `(?:${numbers})+`;\n};\n","import { makeFormatter } from './../factory.js';\nimport { getDayPeriods, getDays, getEras, getMonths, getNumbers } from './values.js';\n\n/**\n * Format a day as a locale string.\n * @param {string} locale The locale.\n * @param {number} day The day to format (0-6).\n * @param {string} [type=long] The formatting type.\n * @param {Boolean} [standalone=true] Whether the value is standalone.\n * @return {string} The formatted string.\n */\nexport function formatDay(locale, day, type = 'long', standalone = true) {\n    return getDays(locale, type, standalone)[day];\n};\n\n/**\n * Format a day period as a locale string.\n * @param {string} locale The locale.\n * @param {number} period The period to format (0-1).\n * @param {string} [type=long] The formatting type.\n * @return {string} The formatted string.\n */\nexport function formatDayPeriod(locale, period, type = 'long') {\n    return getDayPeriods(locale, type)[period];\n};\n\n/**\n * Format an era as a locale string.\n * @param {string} locale The locale.\n * @param {number} era The period to format (0-1).\n * @param {string} [type=long] The formatting type.\n * @return {string} The formatted string.\n */\nexport function formatEra(locale, era, type = 'long') {\n    return getEras(locale, type)[era];\n};\n\n/**\n * Format a month as a locale string.\n * @param {string} locale The locale.\n * @param {number} month The month to format (1-12).\n * @param {string} [type=long] The formatting type.\n * @param {Boolean} [standalone=true] Whether the value is standalone.\n * @return {string} The formatted string.\n */\nexport function formatMonth(locale, month, type = 'long', standalone = true) {\n    return getMonths(locale, type, standalone)[month - 1];\n};\n\n/**\n * Format a number as a locale number string.\n * @param {string} locale The locale.\n * @param {number} number The number to format.\n * @param {number} [padding=0] The amount of padding to use.\n * @return {string} The formatted string.\n */\nexport function formatNumber(locale, number, padding = 0) {\n    const numbers = getNumbers(locale);\n    return `${number}`\n        .padStart(padding, 0)\n        .replace(/\\d/g, (match) => numbers[match]);\n};\n\n/**\n * Format a number to an offset string.\n * @param {number} offset The offset to format.\n * @param {Boolean} [useColon=true] Whether to use a colon seperator.\n * @param {Boolean} [optionalMinutes=false] Whether minutes are optional.\n * @return {string} The formatted offset string.\n */\nexport function formatOffset(offset, useColon = true, optionalMinutes = false) {\n    const hours = Math.abs(\n        (offset / 60) | 0,\n    );\n    const minutes = Math.abs(offset % 60);\n\n    const sign = offset > 0 ?\n        '-' :\n        '+';\n    const hourString = `${hours}`.padStart(2, 0);\n    const minuteString = minutes || !optionalMinutes ?\n        `${minutes}`.padStart(2, 0) :\n        '';\n    const colon = useColon && minuteString ?\n        ':' :\n        '';\n\n    return `${sign}${hourString}${colon}${minuteString}`;\n};\n\n/**\n * Format a time zone as a locale string.\n * @param {string} locale The locale.\n * @param {number} timestamp The timestamp to use.\n * @param {string} timeZone The time zone to format.\n * @param {string} [type=long] The formatting type.\n * @return {string} The formatted string.\n */\nexport function formatTimeZoneName(locale, timestamp, timeZone, type = 'long') {\n    return makeFormatter(locale, { second: 'numeric', timeZone, timeZoneName: type })\n        .formatToParts(timestamp)\n        .find((part) => part.type === 'timeZoneName')\n        .value;\n};\n","import { getOffset } from './helpers.js';\nimport { config, dateStringTimeZoneRegExp, offsetRegExp } from './vars.js';\nimport { formatOffset } from './formatter/format.js';\n\n/**\n * DateTime class\n * @class\n */\nexport default class DateTime {\n    /**\n     * New DateTime constructor.\n     * @param {string|number|null} [date] The date or timestamp to parse.\n     * @param {object} [options] Options for the new DateTime.\n     * @param {string} [options.timeZone] The timeZone to use.\n     * @param {string} [options.locale] The locale to use.\n     */\n    constructor(date = null, options = {}) {\n        let timestamp;\n        let adjustOffset = false;\n\n        if (date === null) {\n            timestamp = Date.now();\n        } else if (!isNaN(parseInt(date)) && isFinite(date)) {\n            timestamp = date;\n        } else if (date === `${date}`) {\n            timestamp = Date.parse(date);\n\n            if (isNaN(timestamp)) {\n                throw new Error('Invalid date string supplied');\n            }\n\n            if (!date.match(dateStringTimeZoneRegExp)) {\n                timestamp -= new Date()\n                    .getTimezoneOffset() *\n                    60000;\n            }\n\n            adjustOffset = true;\n        } else {\n            throw new Error('Invalid date supplied');\n        }\n\n        this._date = new Date(timestamp);\n        this._dynamicTz = false;\n        this.isValid = true;\n\n        let timeZone = options.timeZone;\n\n        if (!timeZone) {\n            timeZone = config.defaultTimeZone;\n        }\n\n        if (['Z', 'GMT'].includes(timeZone)) {\n            timeZone = 'UTC';\n        }\n\n        const match = timeZone.match(offsetRegExp);\n        if (match) {\n            this._offset = match[2] * 60 + parseInt(match[4] || 0);\n            if (this._offset && match[1] === '+') {\n                this._offset *= -1;\n            }\n\n            if (this._offset) {\n                this._timeZone = formatOffset(this._offset);\n            } else {\n                this._dynamicTz = true;\n                this._timeZone = 'UTC';\n            }\n        } else {\n            this._dynamicTz = true;\n            this._timeZone = timeZone;\n        }\n\n        if (this._dynamicTz) {\n            this._offset = getOffset(this);\n        }\n\n        if (adjustOffset && this._offset) {\n            const oldOffset = this._offset;\n\n            this._date.setTime(this.getTime() + this._offset * 60000);\n\n            if (this._dynamicTz) {\n                this._offset = getOffset(this);\n\n                // compensate for DST transitions\n                if (oldOffset !== this._offset) {\n                    this._date.setTime(this.getTime() - ((oldOffset - offset) * 60000));\n                }\n            }\n        }\n\n        if (!('locale' in options)) {\n            options.locale = config.defaultLocale;\n        }\n\n        this._locale = options.locale;\n    }\n\n    /**\n     * Get the name of the current locale.\n     * @return {string} The name of the current locale.\n     */\n    getLocale() {\n        return this._locale;\n    }\n\n    /**\n     * Get the number of milliseconds since the UNIX epoch.\n     * @return {number} The number of milliseconds since the UNIX epoch.\n     */\n    getTime() {\n        return this._date.getTime();\n    }\n\n    /**\n     * Get the name of the current timeZone.\n     * @return {string} The name of the current timeZone.\n     */\n    getTimeZone() {\n        return this._timeZone;\n    }\n\n    /**\n     * Get the UTC offset (in minutes) of the current timeZone.\n     * @return {number} The UTC offset (in minutes) of the current timeZone.\n     */\n    getTimeZoneOffset() {\n        return this._offset;\n    }\n\n    /**\n     * Set the current locale.\n     * @param {string} locale The name of the timeZone.\n     * @return {DateTime} The DateTime object.\n     */\n    setLocale(locale) {\n        return new DateTime(this.getTime(), {\n            locale,\n            timeZone: this._timeZone,\n        });\n    }\n\n    /**\n     * Set the number of milliseconds since the UNIX epoch.\n     * @param {number} time The number of milliseconds since the UNIX epoch.\n     * @return {DateTime} The DateTime object.\n     */\n    setTime(time) {\n        return new DateTime(time, {\n            locale: this._locale,\n            timeZone: this._timeZone,\n        });\n    }\n\n    /**\n     * Set the current timeZone.\n     * @param {string} timeZone The name of the timeZone.\n     * @return {DateTime} The DateTime object.\n     */\n    setTimeZone(timeZone) {\n        return new DateTime(this.getTime(), {\n            locale: this._locale,\n            timeZone,\n        });\n    }\n\n    /**\n     * Set the current UTC offset.\n     * @param {number} offset The UTC offset (in minutes).\n     * @return {DateTime} The DateTime object.\n     */\n    setTimeZoneOffset(offset) {\n        return new DateTime(this.getTime(), {\n            locale: this._locale,\n            timeZone: formatOffset(offset),\n        });\n    }\n\n    /**\n     * Get the number of milliseconds since the UNIX epoch.\n     * @return {number} The number of milliseconds since the UNIX epoch.\n     */\n    valueOf() {\n        return this.getTime();\n    }\n\n    /**\n     * Return a primitive value of the DateTime.\n     * @param {string} hint The type hint.\n     * @return {string|number}\n     */\n    [Symbol.toPrimitive](hint) {\n        return hint === 'number' ?\n            this.valueOf() :\n            this.toString();\n    }\n}\n","export const weekStart = { '1': ['af', 'am', 'ar-il', 'ar-sa', 'ar-ye', 'as', 'bn', 'bo', 'brx', 'ccp', 'ceb', 'chr', 'dav', 'dz', 'ebu', 'en', 'fil', 'gu', 'guz', 'haw', 'he', 'hi', 'id', 'ii', 'ja', 'jv', 'kam', 'ki', 'kln', 'km', 'kn', 'ko', 'kok', 'ks', 'lkt', 'lo', 'luo', 'luy', 'mas', 'mer', 'mgh', 'ml', 'mr', 'mt', 'my', 'nd', 'ne', 'om', 'or', 'pa', 'ps-pk', 'pt', 'qu', 'saq', 'sd', 'seh', 'sn', 'ta', 'te', 'th', 'ti', 'ug', 'ur', 'xh', 'yue', 'zh', 'zu'], '7': ['ar', 'ckb', 'en-ae', 'en-sd', 'fa', 'kab', 'lrc', 'mzn', 'ps'] };\nexport const minDaysInFirstWeek = { '4': ['ast', 'bg', 'br', 'ca', 'ce', 'cs', 'cy', 'da', 'de', 'dsb', 'el', 'en-at', 'en-be', 'en-ch', 'en-de', 'en-dk', 'en-fi', 'en-fj', 'en-gb', 'en-gg', 'en-gi', 'en-ie', 'en-im', 'en-je', 'en-nl', 'en-se', 'es', 'et', 'eu', 'fi', 'fo', 'fr', 'fur', 'fy', 'ga', 'gd', 'gl', 'gsw', 'gv', 'hsb', 'hu', 'is', 'it', 'ksh', 'kw', 'lb', 'lt', 'nb', 'nds', 'nl', 'nn', 'os-ru', 'pl', 'pt-ch', 'pt-lu', 'pt-pt', 'rm', 'ru', 'sah', 'se', 'sk', 'smn', 'sv', 'tt', 'wae'] };\n","import { minDaysInFirstWeek, weekStart } from './locales.js';\nimport { getData } from './../factory.js';\n\n/**\n * Get the formatting type from the component token length.\n * @param {number} length The component token length.\n * @return {string} The formatting type.\n */\nexport function getType(length) {\n    switch (length) {\n        case 5:\n            return 'narrow';\n        case 4:\n            return 'long';\n        default:\n            return 'short';\n    }\n};\n\n/**\n * Get the minimum days.\n * @param {string} locale The locale.\n * @return {number} The minimum days.\n */\nexport function minimumDays(locale) {\n    return getData(\n        `minimumDays.${locale}`,\n        (_) => {\n            let minDays = 1;\n            const localeTest = locale.toLowerCase().split('-');\n            while (minDays === 1 && localeTest.length) {\n                for (const days in minDaysInFirstWeek) {\n                    if (!{}.hasOwnProperty.call(minDaysInFirstWeek, days)) {\n                        continue;\n                    }\n\n                    const locales = minDaysInFirstWeek[days];\n\n                    if (locales.includes(localeTest.join('-'))) {\n                        minDays = parseInt(days);\n                        break;\n                    }\n                }\n\n                localeTest.pop();\n            }\n\n            return minDays;\n        },\n    );\n};\n\n/**\n * Get the week start offset for a locale.\n * @param {string} [locale] The locale to load.\n * @return {number} The week start offset.\n */\nfunction weekStartOffset(locale) {\n    return getData(\n        `weekStartOffset.${locale}`,\n        (_) => {\n            let weekStarted;\n            const localeTest = locale.toLowerCase().split('-');\n            while (!weekStarted && localeTest.length) {\n                for (const start in weekStart) {\n                    if (!{}.hasOwnProperty.call(weekStart, start)) {\n                        continue;\n                    }\n\n                    const locales = weekStart[start];\n\n                    if (locales.includes(localeTest.join('-'))) {\n                        weekStarted = parseInt(start);\n                        break;\n                    }\n                }\n\n                localeTest.pop();\n            }\n\n            return weekStarted ?\n                weekStarted - 2 :\n                0;\n        },\n    );\n};\n\n/**\n * Convert a day of the week to a local format.\n * @param {string} locale The locale.\n * @param {number} day The day of the week.\n * @return {number} The local day of the week.\n */\nexport function weekDay(locale, day) {\n    return (7 + parseInt(day) - weekStartOffset(locale)) % 7 || 7;\n};\n","import { getDayPeriods, getDays, getEras, getMonths, getNumbers } from './values.js';\nimport { weekDay } from './utility.js';\n\n/**\n * Parse a day from a locale string.\n * @param {string} locale The locale.\n * @param {string} value The value to parse.\n * @param {string} [type=long] The formatting type.\n * @param {Boolean} [standalone=true] Whether the value is standalone.\n * @return {number} The day number (0-6).\n */\nexport function parseDay(locale, value, type = 'long', standalone = true) {\n    const day = getDays(locale, type, standalone).indexOf(value) || 7;\n    return weekDay(locale, day);\n};\n\n/**\n * Parse a day period from a locale string.\n * @param {string} locale The locale.\n * @param {string} value The value to parse.\n * @param {string} [type=long] The formatting type.\n * @return {number} The day period (0-1).\n */\nexport function parseDayPeriod(locale, value, type = 'long') {\n    return getDayPeriods(locale, type).indexOf(value);\n};\n\n/**\n * Parse an era from a locale string.\n * @param {string} locale The locale.\n * @param {string} value The value to parse.\n * @param {string} [type=long] The formatting type.\n * @return {number} The era (0-1).\n */\nexport function parseEra(locale, value, type = 'long') {\n    return getEras(locale, type).indexOf(value);\n};\n\n/**\n * Parse a month from a locale string.\n * @param {string} locale The locale.\n * @param {string} value The value to parse.\n * @param {string} [type=long] The formatting type.\n * @param {Boolean} [standalone=true] Whether the value is standalone.\n * @return {number} The month number (1-12).\n */\nexport function parseMonth(locale, value, type = 'long', standalone = true) {\n    return getMonths(locale, type, standalone).indexOf(value) + 1;\n};\n\n/**\n * Parse a number from a locale number string.\n * @param {string} locale The locale.\n * @param {string} value The value to parse.\n * @return {number} The parsed number.\n */\nexport function parseNumber(locale, value) {\n    const numbers = getNumbers(locale);\n    return parseInt(\n        `${value}`.replace(/./g, (match) => numbers.indexOf(match)),\n    );\n};\n","import { formatDay, formatMonth, formatNumber, formatOffset } from './format.js';\nimport { parseDay, parseDayPeriod, parseEra, parseMonth, parseNumber } from './parse.js';\nimport { getType } from './utility.js';\nimport { getDayPeriods, getDays, getEras, getMonths, numberRegExp } from './values.js';\n\n/**\n * DateFormatter Format Data\n */\n\nexport default {\n\n    /* ERA */\n\n    G: {\n        key: 'era',\n        maxLength: 5,\n        regex: (locale, length) => {\n            const type = getType(length);\n            return getEras(locale, type).join('|');\n        },\n        input: (locale, value, length) => {\n            const type = getType(length);\n            return parseEra(locale, value, type);\n        },\n        output: (datetime, length) => {\n            const type = getType(length);\n            return datetime.era(type);\n        },\n    },\n\n    /* YEAR */\n\n    // year\n    y: {\n        key: 'year',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value, length) => {\n            value = parseNumber(locale, value);\n\n            if (length !== 2 || `${value}`.length !== 2) {\n                return value;\n            }\n\n            return value > 40 ?\n                1900 + value :\n                2000 + value;\n        },\n        output: (datetime, length) => {\n            let year = datetime.getYear();\n            if (length === 2) {\n                year = `${year}`.slice(-2);\n            }\n            return formatNumber(\n                datetime.getLocale(),\n                Math.abs(year),\n                length,\n            );\n        },\n    },\n\n    // week year\n    Y: {\n        key: 'weekYear',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value, length) => {\n            value = parseNumber(locale, value);\n\n            if (length !== 2 || `${value}`.length !== 2) {\n                return value;\n            }\n\n            return value > 40 ?\n                1900 + value :\n                2000 + value;\n        },\n        output: (datetime, length) => {\n            let year = datetime.getWeekYear();\n            if (length === 2) {\n                year = `${year}`.slice(-2);\n            }\n            return formatNumber(\n                datetime.getLocale(),\n                Math.abs(year),\n                length,\n            );\n        },\n    },\n\n    /* QUARTER */\n\n    // quarter\n    Q: {\n        key: 'quarter',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getQuarter(),\n                length,\n            ),\n    },\n\n    // quarter (standalone)\n    q: {\n        key: 'quarter',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getQuarter(),\n                length,\n            ),\n    },\n\n    /* MONTH */\n\n    // month\n    M: {\n        key: 'month',\n        regex: (locale, length) => {\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return getMonths(locale, type, false).join('|');\n                default:\n                    return numberRegExp(locale);\n            }\n        },\n        input: (locale, value, length) => {\n            switch (length) {\n                case 5:\n                    return null;\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return parseMonth(locale, value, type, false);\n                default:\n                    return parseNumber(locale, value);\n            }\n        },\n        output: (datetime, length) => {\n            const locale = datetime.getLocale();\n            const month = datetime.getMonth();\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return formatMonth(locale, month, type, false);\n                default:\n                    return formatNumber(locale, month, length);\n            }\n        },\n    },\n\n    // month (standalone)\n    L: {\n        key: 'month',\n        regex: (locale, length) => {\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return getMonths(locale, type).join('|');\n                default:\n                    return numberRegExp(locale);\n            }\n        },\n        input: (locale, value, length) => {\n            switch (length) {\n                case 5:\n                    return null;\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return parseMonth(locale, value, type);\n                default:\n                    return parseNumber(locale, value);\n            }\n        },\n        output: (datetime, length) => {\n            const locale = datetime.getLocale();\n            const month = datetime.getMonth();\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return formatMonth(locale, month, type);\n                default:\n                    return formatNumber(locale, month, length);\n            }\n        },\n    },\n\n    /* WEEK */\n\n    // local week\n    w: {\n        key: 'week',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getWeek(),\n                length,\n            ),\n    },\n\n    // local week of month\n    W: {\n        key: 'weekOfMonth',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getWeekOfMonth(),\n            ),\n    },\n\n    /* DAY */\n\n    // day of month\n    d: {\n        key: 'date',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getDate(),\n                length,\n            ),\n    },\n\n    // day of year\n    D: {\n        key: 'dayOfYear',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getDayOfYear(),\n                length,\n            ),\n    },\n\n    // day of week in month\n    F: {\n        key: 'weekDayInMonth',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getWeekDayInMonth(),\n            ),\n    },\n\n    // week day name\n    E: {\n        key: 'weekDay',\n        regex: (locale, length) => {\n            const type = getType(length);\n            return getDays(locale, type, false).join('|');\n        },\n        input: (locale, value, length) => {\n            if (length === 5) {\n                return null;\n            }\n\n            const type = getType(length);\n            return parseDay(locale, value, type, false);\n        },\n        output: (datetime, length) => {\n            const type = getType(length);\n            const locale = datetime.getLocale();\n            const day = datetime.getDay();\n            return formatDay(locale, day, type, false);\n        },\n    },\n\n    // week day\n    e: {\n        key: 'weekDay',\n        maxLength: 5,\n        regex: (locale, length) => {\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return getDays(locale, type, false).join('|');\n                default:\n                    return numberRegExp(locale);\n            }\n        },\n        input: (locale, value, length) => {\n            switch (length) {\n                case 5:\n                    return null;\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return parseDay(locale, value, type, false);\n                default:\n                    return parseNumber(locale, value);\n            }\n        },\n        output: (datetime, length) => {\n            const locale = datetime.getLocale();\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    const day = datetime.getDay();\n                    return formatDay(locale, day, type, false);\n                default:\n                    const weekDay = datetime.getWeekDay();\n                    return formatNumber(locale, weekDay, length);\n            }\n        },\n    },\n\n    // week day (standalone)\n    c: {\n        key: 'weekDay',\n        maxLength: 5,\n        regex: (locale, length) => {\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return getDays(locale, type).join('|');\n                default:\n                    return numberRegExp(locale);\n            }\n        },\n        input: (locale, value, length) => {\n            switch (length) {\n                case 5:\n                    return null;\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    return parseDay(locale, value, type);\n                default:\n                    return parseNumber(locale, value);\n            }\n        },\n        output: (datetime, length) => {\n            const locale = datetime.getLocale();\n            switch (length) {\n                case 5:\n                case 4:\n                case 3:\n                    const type = getType(length);\n                    const day = datetime.getDay();\n                    return formatDay(locale, day, type);\n                default:\n                    const weekDay = datetime.getWeekDay();\n                    return formatNumber(locale, weekDay);\n            }\n        },\n    },\n\n    /* PERIOD */\n\n    a: {\n        key: 'dayPeriod',\n        regex: (locale, length) => {\n            const type = getType(length);\n            return getDayPeriods(locale, type).join('|');\n        },\n        input: (locale, value, length) => {\n            const type = getType(length);\n            return parseDayPeriod(locale, value, type);\n        },\n        output: (datetime, length) => {\n            const type = getType(length);\n            return datetime.dayPeriod(type);\n        },\n    },\n\n    /* HOUR */\n\n    h: {\n        key: 'hours12',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => {\n            value = parseNumber(locale, value);\n            if (value === 12) {\n                value = 0;\n            }\n            return value;\n        },\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getHours() % 12 || 12,\n                length,\n            ),\n    },\n\n    H: {\n        key: 'hours24',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getHours(),\n                length,\n            ),\n    },\n\n    K: {\n        key: 'hours12',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getHours() % 12,\n                length,\n            ),\n    },\n\n    k: {\n        key: 'hours24',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => {\n            value = parseNumber(locale, value);\n            if (value === 24) {\n                value = 0;\n            }\n            return value;\n        },\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getHours() || 24,\n                length,\n            ),\n    },\n\n    /* MINUTE */\n\n    m: {\n        key: 'minutes',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getMinutes(),\n                length,\n            ),\n    },\n\n    /* SECOND */\n\n    s: {\n        key: 'seconds',\n        regex: (locale) => numberRegExp(locale),\n        input: (locale, value) => parseNumber(locale, value),\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                datetime.getSeconds(),\n                length,\n            ),\n    },\n\n    /* FRACTIONAL */\n\n    S: {\n        key: 'milliseconds',\n        regex: (locale) => numberRegExp(locale),\n        input: (_) => 0,\n        output: (datetime, length) =>\n            formatNumber(\n                datetime.getLocale(),\n                `${Math.floor(\n                    datetime.getMilliseconds() *\n                    1000,\n                )}`.padEnd(length, '0').slice(0, length),\n            ),\n    },\n\n    /* TIMEZONE/OFFSET */\n\n    z: {\n        output: (datetime, length) => {\n            if (length === 5) {\n                length = 1;\n            }\n            const type = getType(length);\n            return datetime.timeZoneName(type);\n        },\n    },\n\n    Z: {\n        key: 'timeZone',\n        regex: (_, length) => {\n            switch (length) {\n                case 5:\n                    return `[\\\\+\\\\-]\\\\d{2}\\\\:\\\\d{2}|Z`;\n                case 4:\n                    return `GMT[\\\\+\\\\-]\\\\d{2}\\\\:\\\\d{2}|GMT`;\n                default:\n                    return `[\\\\+\\\\-]\\\\d{4}`;\n            }\n        },\n        input: (_, value) => value,\n        output: (datetime, length) => {\n            const offset = datetime.getTimeZoneOffset();\n\n            let useColon = true;\n            let prefix = '';\n            switch (length) {\n                case 5:\n                    if (!offset) {\n                        return 'Z';\n                    }\n                    break;\n                case 4:\n                    prefix = 'GMT';\n\n                    if (!offset) {\n                        return prefix;\n                    }\n\n                    break;\n                default:\n                    useColon = false;\n                    break;\n            }\n\n            return prefix + formatOffset(offset, useColon);\n        },\n    },\n\n    O: {\n        key: 'timeZone',\n        regex: (_, length) => {\n            switch (length) {\n                case 4:\n                    return `GMT[\\\\+\\\\-]\\\\d{2}\\\\:\\\\d{2}|GMT`;\n                default:\n                    return `GMT[\\\\+\\\\-]\\\\d{2}|GMT`;\n            }\n        },\n        input: (_, value) => value,\n        output: (datetime, length) => {\n            const offset = datetime.getTimeZoneOffset();\n            const prefix = 'GMT';\n\n            if (!offset) {\n                return prefix;\n            }\n\n            let optionalMinutes = false;\n            switch (length) {\n                case 4:\n                    break;\n                default:\n                    optionalMinutes = true;\n            }\n\n            return prefix + formatOffset(offset, true, optionalMinutes);\n        },\n    },\n\n    V: {\n        key: 'timeZone',\n        regex: (_) => '([a-zA-Z_\\/]+)',\n        input: (_, value) => value,\n        output: (datetime) => datetime.getTimeZone(),\n    },\n\n    X: {\n        key: 'timeZone',\n        regex: (_, length) => {\n            switch (length) {\n                case 5:\n                case 3:\n                    return `[\\\\+\\\\-]\\\\d{2}\\\\:\\\\d{2}|Z`;\n                case 4:\n                case 2:\n                    return `[\\\\+\\\\-]\\\\d{4}|Z`;\n                default:\n                    return `[\\\\+\\\\-]\\\\d{2}(?:\\\\d{2})?|Z`;\n            }\n        },\n        input: (_, value) => value,\n        output: (datetime, length) => {\n            const offset = datetime.getTimeZoneOffset();\n\n            if (!offset) {\n                return 'Z';\n            }\n\n            let useColon;\n            switch (length) {\n                case 5:\n                case 3:\n                    useColon = true;\n                    break;\n                default:\n                    useColon = false;\n                    break;\n            }\n\n            return formatOffset(offset, useColon, length === 1);\n        },\n    },\n\n    x: {\n        key: 'timeZone',\n        regex: (_, length) => {\n            switch (length) {\n                case 5:\n                case 3:\n                    return `[\\\\+\\\\-]\\\\d{2}\\\\:\\\\d{2}`;\n                case 4:\n                case 2:\n                    return `[\\\\+\\\\-]\\\\d{4}`;\n                default:\n                    return `[\\\\+\\\\-]\\\\d{2}(?:\\\\d{2})?`;\n            }\n        },\n        input: (_, value) => value,\n        output: (datetime, length) => {\n            let useColon;\n            switch (length) {\n                case 5:\n                case 3:\n                    useColon = true;\n                    break;\n                default:\n                    useColon = false;\n                    break;\n            }\n\n            return formatOffset(datetime.getTimeZoneOffset(), useColon, length === 1);\n        },\n    },\n\n};\n","import { config, monthDays } from './../vars.js';\n\n/**\n * DateTime (Static) Utility\n */\n\n/**\n * Get the day of the year for a year, month and date.\n * @param {number} year The year.\n * @param {number} month The month. (1, 12)\n * @param {number} date The date.\n * @return {number} The day of the year. (1, 366)\n */\nexport function dayOfYear(year, month, date) {\n    return new Array(month - 1)\n        .fill()\n        .reduce(\n            (d, _, i) =>\n                d + daysInMonth(year, i + 1),\n            date,\n        );\n};\n\n/**\n * Get the number of days in a month, from a year and month.\n * @param {number} year The year.\n * @param {number} month The month. (1, 12)\n * @return {number} The number of days in the month.\n */\nexport function daysInMonth(year, month) {\n    const date = new Date(Date.UTC(year, month - 1));\n    month = date.getUTCMonth();\n\n    return monthDays[month] +\n        (\n            month == 1 && isLeapYear(\n                date.getUTCFullYear(),\n            ) ?\n                1 :\n                0\n        );\n};\n\n/**\n * Get the number of days in a year.\n * @param {number} year The year.\n * @return {number} The number of days in the year.\n */\nexport function daysInYear(year) {\n    return !isLeapYear(year) ?\n        365 :\n        366;\n};\n\n/**\n * Get the default locale.\n * @return {string} The locale.\n */\nexport function getDefaultLocale() {\n    return config.defaultLocale;\n};\n\n/**\n * Get the default timeZone.\n * @return {string} The name of the timeZone.\n */\nexport function getDefaultTimeZone() {\n    return config.defaultTimeZone;\n};\n\n/**\n * Return true if a year is a leap year.\n * @param {number} year The year.\n * @return {Boolean} TRUE if the year is a leap year, otherwise FALSE.\n */\nexport function isLeapYear(year) {\n    return new Date(year, 1, 29)\n        .getDate() === 29;\n};\n\n/**\n * Set whether dates will be clamped when changing months.\n * @param {Boolean} clampDates Whether to clamp dates.\n */\nexport function setDateClamping(clampDates) {\n    config.clampDates = clampDates;\n};\n\n/**\n * Set the default locale.\n * @param {string} locale The locale.\n */\nexport function setDefaultLocale(locale) {\n    config.defaultLocale = locale;\n};\n\n/**\n * Set the default timeZone.\n * @param {string} timeZone The name of the timeZone.\n */\nexport function setDefaultTimeZone(timeZone) {\n    config.defaultTimeZone = timeZone;\n};\n","import DateTime from './date-time.js';\nimport { fromArray, fromDate, fromFormat, fromISOString, fromTimestamp, now } from './static/create.js';\nimport { dayOfYear, daysInMonth as _daysInMonth, daysInYear as _daysInYear, getDefaultLocale, getDefaultTimeZone, isLeapYear as _isLeapYear, setDateClamping, setDefaultLocale, setDefaultTimeZone } from './static/utility.js';\nimport { getDate, getDay, getDayOfYear, getHours, getMilliseconds, getMinutes, getMonth, getQuarter, getSeconds, getTimestamp, getWeek, getWeekDay, getWeekDayInMonth, getWeekOfMonth, getWeekYear, getYear } from './prototype/attributes-get.js';\nimport { setDate, setDay, setDayOfYear, setHours, setMilliseconds, setMinutes, setMonth, setQuarter, setSeconds, setTimestamp, setWeek, setWeekDay, setWeekDayInMonth, setWeekOfMonth, setWeekYear, setYear } from './prototype/attributes-set.js';\nimport { add, endOf, startOf, sub } from './prototype/manipulate.js';\nimport { format, toDateString, toISOString, toString, toTimeString, toUTCString } from './prototype/output.js';\nimport { dayName, dayPeriod, daysInMonth, daysInYear, diff, era, humanDiff, isAfter, isBefore, isBetween, isDST, isLeapYear, isSame, isSameOrAfter, isSameOrBefore, monthName, timeZoneName, weeksInYear } from './prototype/utility.js';\n\nDateTime.dayOfYear = dayOfYear;\nDateTime.daysInMonth = _daysInMonth;\nDateTime.daysInYear = _daysInYear;\nDateTime.fromArray = fromArray;\nDateTime.fromDate = fromDate;\nDateTime.fromFormat = fromFormat;\nDateTime.fromISOString = fromISOString;\nDateTime.fromTimestamp = fromTimestamp;\nDateTime.getDefaultLocale = getDefaultLocale;\nDateTime.getDefaultTimeZone = getDefaultTimeZone;\nDateTime.isLeapYear = _isLeapYear;\nDateTime.now = now;\nDateTime.setDateClamping = setDateClamping;\nDateTime.setDefaultLocale = setDefaultLocale;\nDateTime.setDefaultTimeZone = setDefaultTimeZone;\n\nconst proto = DateTime.prototype;\n\nproto.add = add;\nproto.dayName = dayName;\nproto.dayPeriod = dayPeriod;\nproto.daysInMonth = daysInMonth;\nproto.daysInYear = daysInYear;\nproto.diff = diff;\nproto.endOf = endOf;\nproto.era = era;\nproto.format = format;\nproto.getDate = getDate;\nproto.getDay = getDay;\nproto.getDayOfYear = getDayOfYear;\nproto.getHours = getHours;\nproto.getMilliseconds = getMilliseconds;\nproto.getMinutes = getMinutes;\nproto.getMonth = getMonth;\nproto.getQuarter = getQuarter;\nproto.getSeconds = getSeconds;\nproto.getTimestamp = getTimestamp;\nproto.getWeek = getWeek;\nproto.getWeekDay = getWeekDay;\nproto.getWeekDayInMonth = getWeekDayInMonth;\nproto.getWeekOfMonth = getWeekOfMonth;\nproto.getWeekYear = getWeekYear;\nproto.getYear = getYear;\nproto.humanDiff = humanDiff;\nproto.isAfter = isAfter;\nproto.isBefore = isBefore;\nproto.isBetween = isBetween;\nproto.isDST = isDST;\nproto.isLeapYear = isLeapYear;\nproto.isSame = isSame;\nproto.isSameOrAfter = isSameOrAfter;\nproto.isSameOrBefore = isSameOrBefore;\nproto.monthName = monthName;\nproto.setDate = setDate;\nproto.setDay = setDay;\nproto.setDayOfYear = setDayOfYear;\nproto.setHours = setHours;\nproto.setMilliseconds = setMilliseconds;\nproto.setMinutes = setMinutes;\nproto.setMonth = setMonth;\nproto.setQuarter = setQuarter;\nproto.setSeconds = setSeconds;\nproto.setTimestamp = setTimestamp;\nproto.setWeek = setWeek;\nproto.setWeekDay = setWeekDay;\nproto.setWeekDayInMonth = setWeekDayInMonth;\nproto.setWeekOfMonth = setWeekOfMonth;\nproto.setWeekYear = setWeekYear;\nproto.setYear = setYear;\nproto.startOf = startOf;\nproto.sub = sub;\nproto.timeZoneName = timeZoneName;\nproto.toDateString = toDateString;\nproto.toISOString = toISOString;\nproto.toString = toString;\nproto.toTimeString = toTimeString;\nproto.toUTCString = toUTCString;\nproto.weeksInYear = weeksInYear;\n\nexport default DateTime;\n","import DateTime from './../date-time.js';\nimport { parseCompare, parseFactory } from './../helpers.js';\nimport { config, formats, formatTokenRegExp, parseOrderKeys } from './../vars.js';\nimport tokens from './../formatter/tokens.js';\n\n/**\n * DateTime (Static) Creation\n */\n\n/**\n * Create a new DateTime from an array.\n * @param {number[]} dateArray The date to parse.\n * @param {object} [options] Options for the new DateTime.\n * @param {string} [options.timeZone] The timeZone to use.\n * @param {string} [options.locale] The locale to use.\n * @return {DateTime} A new DateTime object.\n */\nexport function fromArray(dateArray, options = {}) {\n    const dateValues = dateArray.slice(0, 3);\n    const timeValues = dateArray.slice(3);\n\n    if (dateValues.length < 3) {\n        dateValues.push(...new Array(3 - dateValues.length).fill(1));\n    }\n\n    if (timeValues.length < 4) {\n        timeValues.push(...new Array(4 - timeValues.length).fill(0));\n    }\n\n    return new DateTime(null, options)\n        .setTimestamp(0)\n        .setYear(...dateValues)\n        .setHours(...timeValues);\n};\n\n/**\n * Create a new DateTime from a Date.\n * @param {Date} date The date.\n * @param {object} [options] Options for the new DateTime.\n * @param {string} [options.timeZone] The timeZone to use.\n * @param {string} [options.locale] The locale to use.\n * @return {DateTime} A new DateTime object.\n */\nexport function fromDate(date, options = {}) {\n    return new DateTime(date.getTime(), options);\n};\n\n/**\n * Create a new DateTime from a format string.\n * @param {string} formatString The format string.\n * @param {string} dateString The date string.\n * @param {object} [options] Options for the new DateTime.\n * @param {string} [options.timeZone] The timeZone to use.\n * @param {string} [options.locale] The locale to use.\n * @return {DateTime} A new DateTime object.\n */\nexport function fromFormat(formatString, dateString, options = {}) {\n    if (!('locale' in options)) {\n        options.locale = config.defaultLocale;\n    }\n\n    const values = [];\n\n    let match;\n    while (formatString && (match = formatString.match(formatTokenRegExp))) {\n        const token = match[1];\n        const position = match.index;\n        const length = match[0].length;\n\n        if (position) {\n            const formatTest = formatString.substring(0, position);\n            parseCompare(formatTest, dateString);\n        }\n\n        formatString = formatString.substring(position + length);\n        dateString = dateString.substring(position);\n\n        if (!token) {\n            const literal = match[0].slice(1, -1);\n            parseCompare(literal || `'`, dateString);\n            dateString = dateString.substring(literal.length);\n            continue;\n        }\n\n        if (!(token in tokens)) {\n            throw new Error(`Invalid token in DateTime format: ${token}`);\n        }\n\n        const regExp = tokens[token].regex(options.locale, length);\n        const matchedValue = dateString.match(new RegExp(`^${regExp}`));\n\n        if (!matchedValue) {\n            throw new Error(`Unmatched token in DateTime string: ${token}`);\n        }\n\n        const literal = matchedValue[0];\n        const value = tokens[token].input(options.locale, literal, length);\n\n        if (value !== null) {\n            const key = tokens[token].key;\n            values.push({ key, value, literal, token, length });\n        }\n\n        dateString = dateString.substring(literal.length);\n    }\n\n    if (formatString) {\n        parseCompare(formatString, dateString);\n    }\n\n    if (!('timeZone' in options)) {\n        options.timeZone = config.defaultTimeZone;\n    }\n\n    let timeZone = options.timeZone;\n    for (const { key, value } of values) {\n        if (key !== 'timeZone') {\n            continue;\n        }\n\n        timeZone = value;\n    }\n\n    let datetime = this.fromTimestamp(0, {\n        locale: options.locale,\n    }).setYear(1).setTimeZone(timeZone);\n\n    const methods = parseFactory();\n\n    const testValues = [];\n\n    for (const subKeys of parseOrderKeys) {\n        for (const subKey of subKeys) {\n            if (subKey === 'era' && !values.find((data) => data.key === 'year')) {\n                continue;\n            }\n\n            for (const data of values) {\n                const { key, value, literal, token, length } = data;\n\n                if (key !== subKey) {\n                    continue;\n                }\n\n                // skip narrow month and day names if output already matches\n                if (length === 5 && ['M', 'L', 'E', 'e', 'c'].includes(token)) {\n                    const fullToken = token.repeat(length);\n                    if (datetime.format(fullToken) === literal) {\n                        continue;\n                    }\n                }\n\n                datetime = methods[key].set(datetime, value);\n                testValues.push(data);\n            }\n        }\n    }\n\n    let isValid = true;\n    for (const { key, value } of testValues) {\n        if (key in methods && methods[key].get(datetime) !== value) {\n            isValid = false;\n            break;\n        }\n    }\n\n    if (options.timeZone !== timeZone) {\n        datetime = datetime.setTimeZone(options.timeZone);\n    }\n\n    datetime.isValid = isValid;\n\n    return datetime;\n};\n\n/**\n * Create a new DateTime from an ISO format string.\n * @param {string} dateString The date string.\n * @param {object} [options] Options for the new DateTime.\n * @param {string} [options.timeZone] The timeZone to use.\n * @param {string} [options.locale] The locale to use.\n * @return {DateTime} A new DateTime object.\n */\nexport function fromISOString(dateString, options = {}) {\n    let date = this.fromFormat(formats.rfc3339_extended, dateString, {\n        locale: 'en',\n    });\n\n    if ('timeZone' in options) {\n        date = date.setTimeZone(options.timeZone);\n    }\n\n    if ('locale' in options) {\n        date = date.setLocale(options.locale);\n    }\n\n    return date;\n};\n\n/**\n * Create a new DateTime from a timestamp.\n * @param {number} timestamp The timestamp.\n * @param {object} [options] Options for the new DateTime.\n * @param {string} [options.timeZone] The timeZone to use.\n * @param {string} [options.locale] The locale to use.\n * @return {DateTime} A new DateTime object.\n */\nexport function fromTimestamp(timestamp, options = {}) {\n    return new DateTime(null, options)\n        .setTimestamp(timestamp);\n};\n\n/**\n * Create a new DateTime for the current time.\n * @param {object} [options] Options for the new DateTime.\n * @param {string} [options.timeZone] The timeZone to use.\n * @param {string} [options.locale] The locale to use.\n * @return {DateTime} A new DateTime object.\n */\nexport function now(options = {}) {\n    return new DateTime(null, options);\n};\n","import { modify } from './../helpers.js';\nimport { daysInMonth } from './../static/utility.js';\n\n/**\n * DateTime Manipulation\n */\n\n/**\n * Add a duration to the date.\n * @param {number} amount The amount to modify the date by.\n * @param {string} timeUnit The unit of time.\n * @return {DateTime} The DateTime object.\n */\nexport function add(amount, timeUnit) {\n    return modify(this, amount, timeUnit);\n};\n\n/**\n * Modify the DateTime by setting it to the end of a unit of time.\n * @param {string} timeUnit The unit of time.\n * @return {DateTime} The DateTime object.\n */\nexport function endOf(timeUnit) {\n    timeUnit = timeUnit.toLowerCase();\n\n    switch (timeUnit) {\n        case 'second':\n            return this.setMilliseconds(999);\n        case 'minute':\n            return this.setSeconds(59, 999);\n        case 'hour':\n            return this.setMinutes(59, 59, 999);\n        case 'day':\n            return this.setHours(23, 59, 59, 999);\n        case 'week':\n            return this.setWeekDay(7)\n                .setHours(23, 59, 59, 999);\n        case 'month':\n            return this.setDate(this.daysInMonth())\n                .setHours(23, 59, 59, 999);\n        case 'quarter':\n            const month = this.getQuarter() * 3;\n            return this.setMonth(month, daysInMonth(this.getYear(), month))\n                .setHours(23, 59, 59, 999);\n        case 'year':\n            return this.setMonth(12, 31)\n                .setHours(23, 59, 59, 999);\n        default:\n            throw new Error('Invalid time unit supplied');\n    }\n};\n\n/**\n * Modify the DateTime by setting it to the start of a unit of time.\n * @param {string} timeUnit The unit of time.\n * @return {DateTime} The DateTime object.\n */\nexport function startOf(timeUnit) {\n    timeUnit = timeUnit.toLowerCase();\n\n    switch (timeUnit) {\n        case 'second':\n            return this.setMilliseconds(0);\n        case 'minute':\n            return this.setSeconds(0, 0);\n        case 'hour':\n            return this.setMinutes(0, 0, 0);\n        case 'day':\n            return this.setHours(0, 0, 0, 0);\n        case 'week':\n            return this.setWeekDay(1)\n                .setHours(0, 0, 0, 0);\n        case 'month':\n            return this.setDate(1)\n                .setHours(0, 0, 0, 0);\n        case 'quarter':\n            const month = this.getQuarter() * 3 - 2;\n            return this.setMonth(month, 1)\n                .setHours(0, 0, 0, 0);\n        case 'year':\n            return this.setMonth(1, 1)\n                .setHours(0, 0, 0, 0);\n        default:\n            throw new Error('Invalid time unit supplied');\n    }\n};\n\n/**\n * Subtract a duration from the date.\n * @param {number} amount The amount to modify the date by.\n * @param {string} timeUnit The unit of time.\n * @return {DateTime} The DateTime object.\n */\nexport function sub(amount, timeUnit) {\n    return modify(this, -amount, timeUnit);\n};\n","import DateTime from './../date-time.js';\nimport { getRelativeFormatter } from './../factory.js';\nimport { compensateDiff, getBiggestDiff } from './../helpers.js';\nimport { formatDay, formatDayPeriod, formatEra, formatMonth, formatOffset, formatTimeZoneName } from './../formatter/format.js';\nimport { minimumDays } from './../formatter/utility.js';\nimport { daysInMonth as _daysInMonth, daysInYear as _daysInYear, isLeapYear as _isLeapYear } from './../static/utility.js';\n\n/**\n * DateTime Utility\n */\n\n/**\n * Get the name of the day of the week in current timeZone.\n * @param {string} [type=long] The type of day name to return.\n * @return {string} The name of the day of the week.\n */\nexport function dayName(type = 'long') {\n    return formatDay(this.getLocale(), this.getDay(), type);\n};\n\n/**\n * Get the day period in current timeZone.\n * @param {string} [type=long] The type of day period to return.\n * @return {string} The day period.\n */\nexport function dayPeriod(type = 'long') {\n    return formatDayPeriod(\n        this.getLocale(),\n        this.getHours() < 12 ?\n            0 :\n            1,\n        type,\n    );\n};\n\n/**\n * Get the number of days in the current month.\n * @return {number} The number of days in the current month.\n */\nexport function daysInMonth() {\n    return _daysInMonth(\n        this.getYear(),\n        this.getMonth(),\n    );\n};\n\n/**\n * Get the number of days in the current year.\n * @return {number} The number of days in the current year.\n */\nexport function daysInYear() {\n    return _daysInYear(\n        this.getYear(),\n    );\n};\n\n/**\n * Get the difference between this and another Date.\n * @param {DateTime} [other] The date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.timeUnit] The unit of time.\n * @param {Boolean} [options.relative=true] Whether to use the relative difference.\n * @return {number} The difference.\n */\nexport function diff(other, { timeUnit, relative = true } = {}) {\n    if (!other) {\n        other = new this.constructor;\n    }\n\n    if (!timeUnit) {\n        return this - other;\n    }\n\n    if (timeUnit) {\n        timeUnit = timeUnit.toLowerCase();\n    }\n\n    other = other.setTimeZone(this.getTimeZone());\n\n    switch (timeUnit) {\n        case 'year':\n        case 'years':\n            const yearDiff = this.getYear() - other.getYear();\n            return compensateDiff(\n                this,\n                other.setYear(\n                    this.getYear(),\n                ),\n                yearDiff,\n                !relative,\n                -1,\n            );\n        case 'month':\n        case 'months':\n            const monthDiff = (this.getYear() - other.getYear()) *\n                12 +\n                this.getMonth() -\n                other.getMonth();\n            return compensateDiff(\n                this,\n                other.setYear(\n                    this.getYear(),\n                    this.getMonth(),\n                ),\n                monthDiff,\n                !relative,\n                -1,\n            );\n        case 'week':\n        case 'weeks':\n            const weekDiff = (this - other) / 604800000;\n            return compensateDiff(\n                this,\n                other.setWeekYear(\n                    this.getWeekYear(),\n                    this.getWeek(),\n                ),\n                weekDiff,\n                relative,\n            );\n        case 'day':\n        case 'days':\n            const dayDiff = (this - other) / 86400000;\n            return compensateDiff(\n                this,\n                other.setYear(\n                    this.getYear(),\n                    this.getMonth(),\n                    this.getDate(),\n                ),\n                dayDiff,\n                relative,\n            );\n        case 'hour':\n        case 'hours':\n            const hourDiff = (this - other) / 3600000;\n            return compensateDiff(\n                this,\n                other.setYear(\n                    this.getYear(),\n                    this.getMonth(),\n                    this.getDate(),\n                ).setHours(\n                    this.getHours(),\n                ),\n                hourDiff,\n                relative,\n            );\n        case 'minute':\n        case 'minutes':\n            const minuteDiff = (this - other) / 60000;\n            return compensateDiff(\n                this,\n                other.setYear(\n                    this.getYear(),\n                    this.getMonth(),\n                    this.getDate(),\n                ).setHours(\n                    this.getHours(),\n                    this.getMinutes(),\n                ),\n                minuteDiff,\n                relative,\n            );\n        case 'second':\n        case 'seconds':\n            const secondDiff = (this - other) / 1000;\n            return compensateDiff(\n                this,\n                other.setYear(\n                    this.getYear(),\n                    this.getMonth(),\n                    this.getDate(),\n                ).setHours(\n                    this.getHours(),\n                    this.getMinutes(),\n                    this.getSeconds(),\n                ),\n                secondDiff,\n                relative,\n            );\n        default:\n            throw new Error('Invalid time unit supplied');\n    }\n};\n\n/**\n * Get the era in current timeZone.\n * @param {string} [type=long] The type of era to return.\n * @return {string} The era.\n */\nexport function era(type = 'long') {\n    return formatEra(\n        this.getLocale(),\n        this.getYear() < 0 ?\n            0 :\n            1,\n        type,\n    );\n};\n\n/**\n * Get the difference between this and another Date in human readable form.\n * @param {DateTime} [other] The date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.timeUnit] The unit of time.\n * @return {string} The difference in human readable form.\n */\nexport function humanDiff(other, { timeUnit } = {}) {\n    const relativeFormatter = getRelativeFormatter(this.getLocale());\n\n    if (!relativeFormatter) {\n        throw new Error('RelativeTimeFormat not supported');\n    }\n\n    if (!other) {\n        other = new this.constructor;\n    }\n\n    let amount;\n    if (timeUnit) {\n        amount = this.diff(other, { timeUnit });\n    } else {\n        [amount, timeUnit] = getBiggestDiff(this, other);\n    }\n\n    return relativeFormatter.format(amount, timeUnit);\n};\n\n/**\n * Determine whether this DateTime is after another date (optionally to a granularity).\n * @param {DateTime} [other] The date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.granularity] The level of granularity to use for comparison.\n * @return {Boolean} TRUE if this DateTime is after the other date, otherwise FALSE.\n */\nexport function isAfter(other, { granularity } = {}) {\n    return this.diff(other, { timeUnit: granularity }) > 0;\n};\n\n/**\n * Determine whether this DateTime is before another date (optionally to a granularity).\n * @param {DateTime} [other] The date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.granularity] The level of granularity to use for comparison.\n * @return {Boolean} TRUE if this DateTime is before the other date, otherwise FALSE.\n */\nexport function isBefore(other, { granularity } = {}) {\n    return this.diff(other, { timeUnit: granularity }) < 0;\n};\n\n/**\n * Determine whether this DateTime is between two other dates (optionally to a granularity).\n * @param {DateTime} [start] The first date to compare to.\n * @param {DateTime} [end] The second date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.granularity] The level of granularity to use for comparison.\n * @return {Boolean} TRUE if this DateTime is between the other dates, otherwise FALSE.\n */\nexport function isBetween(start, end, { granularity } = {}) {\n    return this.diff(start, { timeUnit: granularity }) > 0 && this.diff(end, { timeUnit: granularity }) < 0;\n};\n\n/**\n * Return true if the DateTime is in daylight savings.\n * @return {Boolean} TRUE if the current time is in daylight savings, otherwise FALSE.\n */\nexport function isDST() {\n    if (!this._dynamicTz) {\n        return false;\n    }\n\n    const year = this.getYear();\n    const dateA = DateTime.fromArray([year, 1, 1], {\n        timeZone: this.getTimeZone(),\n    });\n    const dateB = DateTime.fromArray([year, 6, 1], {\n        timeZone: this.getTimeZone(),\n    });\n\n    return this.getTimeZoneOffset() < Math.max(dateA.getTimeZoneOffset(), dateB.getTimeZoneOffset());\n};\n\n/**\n * Return true if the year is a leap year.\n * @return {Boolean} TRUE if the current year is a leap year, otherwise FALSE.\n */\nexport function isLeapYear() {\n    return _isLeapYear(\n        this.getYear(),\n    );\n};\n\n/**\n * Determine whether this DateTime is the same as another date (optionally to a granularity).\n * @param {DateTime} [other] The date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.granularity] The level of granularity to use for comparison.\n * @return {Boolean} TRUE if this DateTime is the same as the other date, otherwise FALSE.\n */\nexport function isSame(other, { granularity } = {}) {\n    return this.diff(other, { timeUnit: granularity }) === 0;\n};\n\n/**\n * Determine whether this DateTime is the same or after another date (optionally to a granularity).\n * @param {DateTime} [other] The date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.granularity] The level of granularity to use for comparison.\n * @return {Boolean} TRUE if this DateTime is the same or after the other date, otherwise FALSE.\n */\nexport function isSameOrAfter(other, { granularity } = {}) {\n    return this.diff(other, { timeUnit: granularity }) >= 0;\n};\n\n/**\n * Determine whether this DateTime is the same or before another date.\n * @param {DateTime} other The date to compare to.\n * @param {object} [options] The options for comparing the dates.\n * @param {string} [options.granularity] The level of granularity to use for comparison.\n * @return {Boolean} TRUE if this DateTime is the same or before the other date, otherwise FALSE.\n */\nexport function isSameOrBefore(other, { granularity } = {}) {\n    return this.diff(other, { timeUnit: granularity }) <= 0;\n};\n\n/**\n * Get the name of the month in current timeZone.\n * @param {string} [type=long] The type of month name to return.\n * @return {string} The name of the month.\n */\nexport function monthName(type = 'long') {\n    return formatMonth(this.getLocale(), this.getMonth(), type);\n};\n\n/**\n * Get the name of the current timeZone.\n * @param {string} [type=long] The formatting type.\n * @return {string} The name of the time zone.\n */\nexport function timeZoneName(type = 'long') {\n    return this._dynamicTz ?\n        formatTimeZoneName(this.getLocale(), this.getTime(), this.getTimeZone(), type) :\n        'GMT' + formatOffset(this.getTimeZoneOffset(), true, type === 'short');\n};\n\n/**\n * Get the number of weeks in the current year.\n * @return {number} The number of weeks in the current year.\n */\nexport function weeksInYear() {\n    const minDays = minimumDays(this.getLocale());\n    return this.setMonth(12, 24 + minDays).getWeek();\n};\n","import { formats, formatTokenRegExp } from './../vars.js';\nimport tokens from './../formatter/tokens.js';\n\n/**\n * DateTime Output\n */\n\n/**\n * Format the current date using a format string.\n * @param {string} formatString The format string.\n * @return {string} The formatted date string.\n */\nexport function format(formatString) {\n    let match;\n    let output = '';\n\n    while (formatString && (match = formatString.match(formatTokenRegExp))) {\n        const token = match[1];\n        const position = match.index;\n        const length = match[0].length;\n\n        if (position) {\n            output += formatString.substring(0, position);\n        }\n\n        formatString = formatString.substring(position + length);\n\n        if (!token) {\n            output += match[0].slice(1, -1);\n            continue;\n        }\n\n        if (!(token in tokens)) {\n            throw new Error(`Invalid token in DateTime format: ${token}`);\n        }\n\n        output += tokens[token].output(this, length);\n    }\n\n    output += formatString;\n\n    return output;\n};\n\n/**\n * Format the current date using \"eee MMM dd yyyy\".\n * @return {string} The formatted date string.\n */\nexport function toDateString() {\n    return this.format(formats.date);\n};\n\n/**\n * Format the current date using \"yyyy-MM-dd'THH:mm:ss.SSSSSSxxx\".\n * @return {string} The formatted date string.\n */\nexport function toISOString() {\n    return this\n        .setLocale('en')\n        .setTimeZone('UTC')\n        .format(formats.rfc3339_extended);\n};\n\n/**\n * Format the current date using \"eee MMM dd yyyy HH:mm:ss xx (VV)\".\n * @return {string} The formatted date string.\n */\nexport function toString() {\n    return this.format(formats.string);\n};\n\n/**\n * Format the current date using \"HH:mm:ss xx (VV)\".\n * @return {string} The formatted date string.\n */\nexport function toTimeString() {\n    return this.format(formats.time);\n};\n\n/**\n * Format the current date in UTC timeZone using \"eee MMM dd yyyy HH:mm:ss xx (VV)\".\n * @return {string} The formatted date string.\n */\nexport function toUTCString() {\n    return this\n        .setLocale('en')\n        .setTimeZone('UTC')\n        .toString();\n};\n","import { getOffsetTime } from './../helpers.js';\nimport { minimumDays, weekDay } from './../formatter/utility.js';\nimport { dayOfYear } from './../static/utility.js';\n\n/**\n * DateTime Attributes (Get)\n */\n\n/**\n * Get the date of the month in current timeZone.\n * @return {number} The date of the month.\n */\nexport function getDate() {\n    return new Date(getOffsetTime(this)).getUTCDate();\n};\n\n/**\n * Get the day of the week in current timeZone.\n * @return {number} The day of the week. (0 - Sunday, 6 - Saturday)\n */\nexport function getDay() {\n    return new Date(getOffsetTime(this)).getUTCDay();\n};\n\n/**\n * Get the day of the year in current timeZone.\n * @return {number} The day of the year. (1, 366)\n */\nexport function getDayOfYear() {\n    return dayOfYear(\n        this.getYear(),\n        this.getMonth(),\n        this.getDate(),\n    );\n};\n\n/**\n * Get the hours of the day in current timeZone.\n * @return {number} The hours of the day. (0, 23)\n */\nexport function getHours() {\n    return new Date(getOffsetTime(this)).getUTCHours();\n};\n\n/**\n * Get the milliseconds in current timeZone.\n * @return {number} The milliseconds.\n */\nexport function getMilliseconds() {\n    return new Date(getOffsetTime(this)).getUTCMilliseconds();\n};\n\n/**\n * Get the minutes in current timeZone.\n * @return {number} The minutes. (0, 59)\n */\nexport function getMinutes() {\n    return new Date(getOffsetTime(this)).getUTCMinutes();\n};\n\n/**\n * Get the month in current timeZone.\n * @return {number} The month. (1, 12)\n */\nexport function getMonth() {\n    return new Date(getOffsetTime(this)).getUTCMonth() + 1;\n};\n\n/**\n * Get the quarter of the year in current timeZone.\n * @return {number} The quarter of the year. (1, 4)\n */\nexport function getQuarter() {\n    return Math.ceil(this.getMonth() / 3);\n};\n\n/**\n * Get the seconds in current timeZone.\n * @return {number} The seconds. (0, 59)\n */\nexport function getSeconds() {\n    return new Date(getOffsetTime(this)).getUTCSeconds();\n};\n\n/**\n * Get the number of seconds since the UNIX epoch.\n * @return {number} The number of seconds since the UNIX epoch.\n */\nexport function getTimestamp() {\n    return Math.floor(this.getTime() / 1000);\n};\n\n/**\n * Get the local week in current timeZone.\n * @return {number} The local week. (1, 53)\n */\nexport function getWeek() {\n    const thisWeek = this.startOf('day').setWeekDay(1);\n    const firstWeek = thisWeek.setWeek(1, 1);\n\n    return 1 +\n        (\n            (\n                (thisWeek - firstWeek) /\n                604800000\n            ) | 0\n        );\n};\n\n/**\n * Get the local day of the week in current timeZone.\n * @return {number} The local day of the week. (1 - 7)\n */\nexport function getWeekDay() {\n    return weekDay(\n        this.getLocale(),\n        this.getDay(),\n    );\n};\n\n/**\n * Get the week day in month in current timeZone.\n * @return {number} The week day in month.\n */\nexport function getWeekDayInMonth() {\n    const thisWeek = this.getWeek();\n    const first = this.setDate(1);\n    const firstWeek = first.getWeek();\n    const offset = first.getWeekDay() > this.getWeekDay() ?\n        0 : 1;\n    return firstWeek > thisWeek ?\n        thisWeek + offset :\n        thisWeek - firstWeek + offset;\n};\n\n/**\n * Get the week of month in current timeZone.\n * @return {number} The week of month.\n */\nexport function getWeekOfMonth() {\n    const thisWeek = this.getWeek();\n    const firstWeek = this.setDate(1).getWeek();\n    return firstWeek > thisWeek ?\n        thisWeek + 1 :\n        thisWeek - firstWeek + 1;\n};\n\n/**\n * Get the week year in current timeZone.\n * @return {number} The week year.\n */\nexport function getWeekYear() {\n    const minDays = minimumDays(this.getLocale());\n    return this.setWeekDay(7 - minDays + 1).getYear();\n};\n\n/**\n * Get the year in current timeZone.\n * @return {number} The year.\n */\nexport function getYear() {\n    return new Date(getOffsetTime(this)).getUTCFullYear();\n};\n","import DateTime from './../date-time.js';\nimport { getOffsetTime, setOffsetTime } from './../helpers.js';\nimport { config } from './../vars.js';\nimport { minimumDays } from './../formatter/utility.js';\nimport { daysInMonth } from './../static/utility.js';\n\n/**\n * DateTime Attributes (Set)\n */\n\n/**\n * Set the date of the month in current timeZone.\n * @param {number} date The date of the month.\n * @return {DateTime} The DateTime object.\n */\nexport function setDate(date) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCDate(date),\n    );\n};\n\n/**\n * Set the day of the week in current timeZone.\n * @param {number} day The day of the week. (0 - Sunday, 6 - Saturday)\n * @return {DateTime} The DateTime object.\n */\nexport function setDay(day) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCDate(\n            this.getDate() -\n            this.getDay() +\n            parseInt(day),\n        ),\n    );\n};\n\n/**\n * Set the day of the year in current timeZone.\n * @param {number} day The day of the year. (1, 366)\n * @return {DateTime} The DateTime object.\n */\nexport function setDayOfYear(day) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCMonth(\n            0,\n            day,\n        ),\n    );\n};\n\n/**\n * Set the hours in current timeZone (and optionally, minutes, seconds and milliseconds).\n * @param {number} hours The hours. (0, 23)\n * @param {number} [minutes] The minutes. (0, 59)\n * @param {number} [seconds] The seconds. (0, 59)\n * @param {number} [milliseconds] The milliseconds.\n * @return {DateTime} The DateTime object.\n */\nexport function setHours(...args) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCHours(...args),\n    );\n};\n\n/**\n * Set the milliseconds in current timeZone.\n * @param {number} milliseconds The milliseconds.\n * @return {DateTime} The DateTime object.\n */\nexport function setMilliseconds(milliseconds) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCMilliseconds(milliseconds),\n    );\n};\n\n/**\n * Set the minutes in current timeZone (and optionally, seconds and milliseconds).\n * @param {number} minutes The minutes. (0, 59)\n * @param {number} [seconds] The seconds. (0, 59)\n * @param {number} [milliseconds] The milliseconds.\n * @return {DateTime} The DateTime object.\n */\nexport function setMinutes(...args) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCMinutes(...args),\n    );\n};\n\n/**\n * Set the month in current timeZone (and optionally, date).\n * @param {number} month The month. (1, 12)\n * @param {number|null} [date] The date of the month.\n * @return {DateTime} The DateTime object.\n */\nexport function setMonth(month, date = null) {\n    if (date === null) {\n        date = this.getDate();\n\n        if (config.clampDates) {\n            date = Math.min(\n                date,\n                daysInMonth(\n                    this.getYear(),\n                    month,\n                ),\n            );\n        }\n    }\n\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCMonth(\n            month - 1,\n            date,\n        ),\n    );\n};\n\n/**\n * Set the quarter of the year in current timeZone.\n * @param {number} quarter The quarter of the year. (1, 4)\n * @return {DateTime} The DateTime object.\n */\nexport function setQuarter(quarter) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCMonth(\n            quarter * 3 -\n            3,\n        ),\n    );\n};\n\n/**\n * Set the seconds in current timeZone (and optionally, milliseconds).\n * @param {number} seconds The seconds. (0, 59)\n * @param {number} [milliseconds] The milliseconds.\n * @return {DateTime} The DateTime object.\n */\nexport function setSeconds(...args) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCSeconds(...args),\n    );\n};\n\n/**\n * Set the number of seconds since the UNIX epoch.\n * @param {number} timestamp The number of seconds since the UNIX epoch.\n * @return {DateTime} The DateTime object.\n */\nexport function setTimestamp(timestamp) {\n    return this.setTime(timestamp * 1000);\n};\n\n/**\n * Set the local day of the week in current timeZone (and optionally, day of the week).\n * @param {number} week The local week.\n * @param {number|null} [day] The local day of the week. (1 - 7)\n * @return {DateTime} The DateTime object.\n */\nexport function setWeek(week, day = null) {\n    if (day === null) {\n        day = this.getWeekDay();\n    }\n\n    const minDays = minimumDays(this.getLocale());\n    return this.setYear(this.getWeekYear(), 1, minDays + ((week - 1) * 7)).setWeekDay(day);\n};\n\n/**\n * Set the local day of the week in current timeZone.\n * @param {number} day The local day of the week. (1 - 7)\n * @return {DateTime} The DateTime object.\n */\nexport function setWeekDay(day) {\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCDate(\n            this.getDate() -\n            this.getWeekDay() +\n            parseInt(day),\n        ),\n    );\n};\n\n/**\n * Set the week day in month in current timeZone.\n * @param {number} week The week day in month.\n * @return {DateTime} The DateTime object.\n */\nexport function setWeekDayInMonth(week) {\n    return this.setDate(\n        this.getDate() +\n        (\n            week -\n            this.getWeekDayInMonth()\n        ) * 7,\n    );\n};\n\n/**\n * Set the week of month in current timeZone.\n * @param {number} week The week of month.\n * @return {DateTime} The DateTime object.\n */\nexport function setWeekOfMonth(week) {\n    return this.setDate(\n        this.getDate() +\n        (\n            week -\n            this.getWeekOfMonth()\n        ) * 7,\n    );\n};\n\n/**\n * Set the local day of the week in current timeZone (and optionally, week and day of the week).\n * @param {number} year The local year.\n * @param {number|null} [week] The local week.\n * @param {number|null} [day] The local day of the week. (1 - 7)\n * @return {DateTime} The DateTime object.\n */\nexport function setWeekYear(year, week = null, day = null) {\n    const minDays = minimumDays(this.getLocale());\n\n    if (week === null) {\n        week = Math.min(\n            this.getWeek(),\n            DateTime.fromArray([year, 1, minDays]).weeksInYear(),\n        );\n    }\n\n    if (day === null) {\n        day = this.getWeekDay();\n    }\n\n    return this.setYear(year, 1, minDays + ((week - 1) * 7)).setWeekDay(day);\n};\n\n/**\n * Set the year in current timeZone (and optionally, month and date).\n * @param {number} year The year.\n * @param {number|null} [month] The month. (1, 12)\n * @param {number|null} [date] The date of the month.\n * @return {DateTime} The DateTime object.\n */\nexport function setYear(year, month = null, date = null) {\n    if (month === null) {\n        month = this.getMonth();\n    }\n\n    if (date === null) {\n        date = this.getDate();\n\n        if (config.clampDates) {\n            date = Math.min(\n                date,\n                daysInMonth(\n                    this.getYear(),\n                    month,\n                ),\n            );\n        }\n    }\n\n    return setOffsetTime(\n        this,\n        new Date(getOffsetTime(this)).setUTCFullYear(\n            year,\n            month - 1,\n            date,\n        ),\n    );\n};\n"],"mappings":"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"}